{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao PixCore","text":"<p>Este projeto \u00e9 uma biblioteca Python desenvolvida para simplificar e automatizar a cria\u00e7\u00e3o de BR Codes est\u00e1ticos para o Pix. Se voc\u00ea precisa gerar cobran\u00e7as Pix, seja para um e-commerce, um sistema de PDV ou qualquer outra aplica\u00e7\u00e3o, esta ferramenta foi feita para voc\u00ea.</p> <p>O principal objetivo \u00e9 fornecer uma interface clara e direta para gerar o payload (o famoso \"Pix Copia e Cola\") e o QR Code visual, seguindo rigorosamente as especifica\u00e7\u00f5es do Banco Central do Brasil (BACEN), a partir do Manual BR Code, e o padr\u00e3o EMV\u00ae QRCPS.</p>"},{"location":"#principais-funcionalidades","title":"Principais Funcionalidades","text":"<ul> <li>Gera\u00e7\u00e3o de Payload: Crie a string completa do \"Pix Copia e Cola\" (BR Code) que pode ser usada em qualquer aplicativo banc\u00e1rio.</li> <li>Cria\u00e7\u00e3o de QR Code: Gere a imagem do QR Code como um objeto <code>Pillow (PIL)</code>, permitindo f\u00e1cil manipula\u00e7\u00e3o e integra\u00e7\u00e3o com outras bibliotecas de imagem.</li> <li>Customiza\u00e7\u00e3o Visual: Adicione um logo ao centro do seu QR Code e personalize as cores de preenchimento e fundo.</li> </ul> <ul> <li> <p> In\u00edcio R\u00e1pido</p> <p>Dicas r\u00e1pidas para sair usando</p> </li> <li> <p> Tutorial</p> <p>Para quem quer aprender mais</p> </li> <li> <p> Contribuir</p> <p>Ajude a melhorar o projeto!</p> </li> <li> <p> Sobre</p> <p>Conhe\u00e7a mais sobre o projeto!]</p> </li> </ul>"},{"location":"#gostou-do-projeto-apoie","title":"Gostou do projeto? Apoie!","text":"<p>Este \u00e9 um projeto de c\u00f3digo aberto, desenvolvido e mantido com dedica\u00e7\u00e3o no tempo livre. Se esta biblioteca foi \u00fatil para voc\u00ea ou sua empresa, considere fazer uma doa\u00e7\u00e3o para apoiar o desenvolvimento cont\u00ednuo, a corre\u00e7\u00e3o de bugs e a cria\u00e7\u00e3o de novas funcionalidades.</p> <p>Qualquer contribui\u00e7\u00e3o \u00e9 muito bem-vinda e me ajuda a continuar dedicando tempo a este e outros projetos open source.</p>"},{"location":"#como-ajudar","title":"Como Ajudar","text":"<p>A maneira mais simples e direta de apoiar \u00e9 via Pix.</p> <p>Chave Pix: <code>7a421430-e2a2-4d02-9f33-e1686abed2be</code></p> <p>Muito obrigado pelo seu apoio!</p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/","title":"1. In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao guia de in\u00edcio r\u00e1pido do PixCore! Este tutorial mostrar\u00e1 os passos essenciais para voc\u00ea gerar seu primeiro payload e QR Code Pix de forma simples e direta.</p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-1-instalacao","title":"Passo 1: Instala\u00e7\u00e3o","text":"<p>Primeiro, certifique-se de que a biblioteca esteja instalada. Se ainda n\u00e3o a instalou, utilize o pip:</p> <pre><code>pip install pixcore\n</code></pre> <p>Isso instalar\u00e1 o pixcore e suas depend\u00eancias necess\u00e1rias, como qrcode e Pillow.</p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-2-importando-as-classes-principais","title":"Passo 2: Importando as Classes Principais","text":"<p>Para come\u00e7ar, voc\u00ea precisar\u00e1 importar duas classes centrais do projeto:</p> <ul> <li>PixData: Uma classe de dados para armazenar e validar todas as informa\u00e7\u00f5es da sua cobran\u00e7a.</li> <li>Pix: A classe principal que utiliza os dados do PixData para gerar o payload e o QR Code.</li> </ul> <pre><code>from pixcore.models import PixData\nfrom pixcore.brcode import Pix\n</code></pre>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-3-reunindo-e-validando-os-dados","title":"Passo 3: Reunindo e Validando os Dados","text":"<p>Agora, crie uma inst\u00e2ncia de PixData com as informa\u00e7\u00f5es do recebedor e da transa\u00e7\u00e3o. A grande vantagem \u00e9 que esta classe valida os dados automaticamente, garantindo que o nome n\u00e3o \u00e9 muito longo, que o valor \u00e9 positivo, etc., prevenindo erros antes mesmo da gera\u00e7\u00e3o do c\u00f3digo. <pre><code># Crie um objeto com os dados da cobran\u00e7a\n# Se houver algum dado inv\u00e1lido, um erro (ValueError) ser\u00e1 levantado aqui.\ntry:\n    dados_pix = PixData(\n        recebedor_nome=\"EMPRESA MODELO LTDA\",\n        recebedor_cidade=\"CIDADE EXEMPLO\",\n        pix_key=\"123e4567-e89b-12d3-a456-426655440000\", # Use uma chave pix v\u00e1lida aqui\n        valor=25.50,\n        transacao_id=\"ID.DA.SUA.TRANSACAO.123\"\n    )\nexcept ValueError as e:\n    print(f\"Erro nos dados fornecidos: {e}\")\n</code></pre></p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-4-gerando-o-payload-e-o-qr-code","title":"Passo 4: Gerando o Payload e o QR Code","text":"<p>Com os dados validados, passe o objeto dados_pix para a classe Pix. A partir da\u00ed, voc\u00ea pode gerar o payload (Pix Copia e Cola) ou salvar o QR Code diretamente em um arquivo. <pre><code># Instancie a classe principal com os dados validados\ngerador_pix = Pix(dados_pix)\n\n# Para obter o payload (Copia e Cola)\npayload = gerador_pix.payload()\nprint(\"Payload (Copia e Cola):\")\nprint(payload)\n\n# Para gerar e salvar o QR Code em um arquivo\nprint(\"\\nSalvando QR Code...\")\ngerador_pix.save_qrcode(\"meu_primeiro_pix.png\")\n</code></pre></p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#codigo-completo-exemplo-funcional","title":"C\u00f3digo Completo (Exemplo Funcional)","text":"<p>Para facilitar, aqui est\u00e1 o script completo que voc\u00ea pode copiar, colar e executar para ver a m\u00e1gica acontecer.</p> <pre><code>from pixcore.models import PixData\nfrom pixcore.brcode import Pix\n\ndef gerar_cobranca_pix_exemplo():\n    \"\"\"\n    Fun\u00e7\u00e3o de exemplo que encapsula todos os passos para gerar um Pix.\n    \"\"\"\n    print(\"Iniciando a gera\u00e7\u00e3o de uma cobran\u00e7a Pix...\")\n\n    try:\n        # 1. Defina e valide os dados da cobran\u00e7a\n        dados_pix = PixData(\n            recebedor_nome=\"EMPRESA MODELO LTDA\",\n            recebedor_cidade=\"CIDADE EXEMPLO\",\n            pix_key=\"123e4567-e89b-12d3-a456-426655440000\", # Chave aleat\u00f3ria (UUID)\n            valor=25.50,\n            transacao_id=\"TXID.12345\"\n        )\n        print(\"Dados validados com sucesso!\")\n\n        # 2. Crie a inst\u00e2ncia principal do gerador\n        gerador_pix = Pix(dados_pix)\n\n        # 3. Obtenha o payload (Copia e Cola) e exiba\n        payload = gerador_pix.payload()\n        print(\"\\n--- Payload (Copia e Cola) Gerado ---\")\n        print(payload)\n        print(\"------------------------------------\")\n\n        # 4. Salve o QR Code em um arquivo\n        caminho_arquivo = \"pix_exemplo.png\"\n        gerador_pix.save_qrcode(caminho_arquivo)\n\n        print(f\"\\nQR Code foi salvo com sucesso em: '{caminho_arquivo}'\")\n\n    except ValueError as e:\n        # Captura erros de valida\u00e7\u00e3o da classe PixData\n        print(f\"\\nERRO: N\u00e3o foi poss\u00edvel gerar o Pix. Motivo: {e}\")\n\nif __name__ == \"__main__\":\n    gerar_cobranca_pix_exemplo()\n</code></pre> <p>Ao executar este script, ele imprimir\u00e1 o payload no seu terminal e criar\u00e1 um arquivo de imagem pix_exemplo.png no mesmo diret\u00f3rio.</p> <p>Pronto! Agora voc\u00ea j\u00e1 sabe o b\u00e1sico para criar cobran\u00e7as Pix com a biblioteca.</p>"},{"location":"2.%20Tutorial/","title":"2. Tutorial","text":"<p>Bem-vindo ao tutorial do PixCore! No Guia de In\u00edcio R\u00e1pido, voc\u00ea aprendeu a gerar um QR Code Pix b\u00e1sico. Agora, vamos explorar funcionalidades mais avan\u00e7adas, como customiza\u00e7\u00e3o de cores, adi\u00e7\u00e3o de logos e a manipula\u00e7\u00e3o da imagem do QR Code em mem\u00f3ria.</p>"},{"location":"2.%20Tutorial/#1-gerando-um-pix-sem-valor-definido","title":"1. Gerando um Pix sem Valor Definido","text":"<p>Um caso de uso muito comum \u00e9 gerar um QR Code onde o pagador pode inserir o valor que desejar. Para fazer isso, basta omitir o par\u00e2metro <code>valor</code> ou defini-lo como <code>None</code> ao criar seu objeto <code>PixData</code>.</p> <pre><code>from pixcore.models import PixData\nfrom pixcore.brcode import Pix\n\n# 1. Crie os dados sem o campo \"valor\"\ndados_pix_livre = PixData(\n    recebedor_nome=\"ONG BEM MAIOR\",\n    recebedor_cidade=\"BRASILIA\",\n    pix_key=\"projetobemmaior@email.com\", # Chave do tipo e-mail\n    transacao_id=\"DOACAO123\"\n)\n\n# 2. Instancie o gerador\ngerador_pix = Pix(dados_pix_livre)\n\n# 3. Salve o QR Code\ngerador_pix.save_qrcode(\"pix_sem_valor.png\")\n\nprint(\"QR Code para doa\u00e7\u00e3o (valor livre) salvo com sucesso!\")`\n</code></pre> <p>O arquivo pix_sem_valor.png gerado permitir\u00e1 que o usu\u00e1rio defina o valor a ser pago no app do banco.</p>"},{"location":"2.%20Tutorial/#2-customizacao-visual-do-qr-code","title":"2. Customiza\u00e7\u00e3o Visual do QR Code","text":"<p>A biblioteca permite personalizar a apar\u00eancia do QR Code de duas formas principais: adicionando um logo e alterando as cores.</p>"},{"location":"2.%20Tutorial/#21-adicionando-um-logo","title":"2.1. Adicionando um Logo","text":"<p>Voc\u00ea pode embutir uma imagem (como o logo da sua marca) no centro do QR Code. Para isso, a biblioteca usa um n\u00edvel de corre\u00e7\u00e3o de erros alto, garantindo que o c\u00f3digo continue leg\u00edvel.</p> <p>Importante: O logo deve estar em um formato de imagem comum (.png, .jpg) e n\u00e3o pode ser muito grande para n\u00e3o comprometer a leitura.</p> <pre><code># Reutilizando os dados do exemplo anterior\ndados_pix_com_valor = PixData(\n    recebedor_nome=\"CAFETERIA DO JOSE\",\n    recebedor_cidade=\"RIO DE JANEIRO\",\n    pix_key=\"pagamento@cafeteriajose.com.br\",\n    valor=15.00,\n    transacao_id=\"CAFE-PEDIDO-456\"\n)\n\ngerador_pix = Pix(dados_pix_com_valor)\n\n# Use o par\u00e2metro \"caminho_logo\" para especificar a imagem\ngerador_pix.save_qrcode(\n    \"pix_com_logo.png\",\n    caminho_logo=\"caminho/para/seu/logo.png\" # Altere para o caminho real do seu logo\n)\nprint(\"QR Code com logo salvo!\")\n</code></pre>"},{"location":"2.%20Tutorial/#22-alterando-as-cores","title":"2.2. Alterando as Cores","text":"<p>\u00c9 poss\u00edvel alterar a cor de preenchimento do QR Code e a cor do fundo usando os par\u00e2metros cor_qr e cor_fundo. Voc\u00ea pode usar nomes de cores em ingl\u00eas (ex: \"navy\") ou c\u00f3digos hexadecimais (ex: \"#000080\").</p> <pre><code># Reutilizando o mesmo gerador\ngerador_pix.save_qrcode(\n    \"pix_colorido.png\",\n    cor_qr=\"navy\",       # Cor dos blocos do QR Code\n    cor_fundo=\"#EFEFEF\"  # Cor de fundo\n)\nprint(\"QR Code colorido salvo!\")\n</code></pre>"},{"location":"2.%20Tutorial/#3-manipulando-o-qr-code-em-memoria","title":"3. Manipulando o QR Code em Mem\u00f3ria","text":"<p>E se voc\u00ea n\u00e3o quiser salvar o QR Code em um arquivo? Por exemplo, para exibi-lo em uma p\u00e1gina web com Flask/Django ou inseri-lo em um PDF com reportlab.</p> <p>Para isso, use o m\u00e9todo .qrcode() em vez de .save_qrcode(). Ele retorna um objeto de imagem da biblioteca Pillow (PIL), que voc\u00ea pode manipular como quiser.</p> <pre><code>from pixcore.models import PixData\nfrom pixcore.brcode import Pix\n\ndados_pix = PixData(\n    recebedor_nome=\"LOJA ONLINE\",\n    recebedor_cidade=\"CURITIBA\",\n    pix_key=\"vendas@lojaonline.com\",\n    valor=99.90,\n    transacao_id=\"WEB-VENDA-789\"\n)\ngerador_pix = Pix(dados_pix)\n\n# 1. Gere a imagem do QR Code em mem\u00f3ria\nimagem_qr = gerador_pix.qrcode()\n\n# 2. Agora voc\u00ea tem um objeto de imagem. Voc\u00ea pode:\n#    - Exibi-la (bom para testes e scripts locais)\nprint(\"Exibindo imagem em uma janela...\")\nimagem_qr.show()\n</code></pre> <p>Este m\u00e9todo oferece m\u00e1xima flexibilidade para integrar o QR Code em qualquer fluxo de trabalho da sua aplica\u00e7\u00e3o.</p>"},{"location":"2.%20Tutorial/#4-tratamento-de-erros","title":"4. Tratamento de Erros","text":"<p>Como visto no in\u00edcio, a classe PixData protege sua aplica\u00e7\u00e3o de dados inv\u00e1lidos. \u00c9 uma boa pr\u00e1tica sempre envolver a cria\u00e7\u00e3o de PixData em um bloco try...except para capturar e tratar esses erros de forma elegante.</p> <pre><code>try:\n    # Tentando criar um Pix com um nome de recebedor longo demais\n    dados_errados = PixData(\n        recebedor_nome=\"UM NOME DE EMPRESA EXTREMAMENTE LONGO QUE VAI CAUSAR UM ERRO DE VALIDACAO\",\n        recebedor_cidade=\"SAO PAULO\",\n        pix_key=\"chave-valida@email.com\"\n    )\nexcept ValueError as e:\n    print(f\"Ocorreu um erro esperado: {e}\")\n</code></pre> <p>Com isso, voc\u00ea tem uma vis\u00e3o completa de como utilizar os principais recursos do PixCore. Para detalhes sobre cada par\u00e2metro e m\u00e9todo, consulte a Refer\u00eancia da API.</p>"},{"location":"3.%20Contribui%C3%A7%C3%A3o/","title":"3. Como Contribuir","text":"<p>Ficamos muito felizes com seu interesse em contribuir com o PixCore! Toda contribui\u00e7\u00e3o, n\u00e3o importa o tamanho, \u00e9 bem-vinda e valorizada.</p> <p>Este guia fornecer\u00e1 tudo que voc\u00ea precisa para come\u00e7ar a colaborar com o projeto, seja reportando um bug, sugerindo uma nova funcionalidade ou escrevendo c\u00f3digo.</p>"},{"location":"3.%20Contribui%C3%A7%C3%A3o/#tipos-de-contribuicao","title":"Tipos de Contribui\u00e7\u00e3o","text":"<p>Existem muitas maneiras de contribuir, e todas s\u00e3o importantes:</p> <ul> <li>\ud83d\udc1e Reportando Bugs: Se voc\u00ea encontrou um comportamento inesperado ou um erro, abra uma Issue detalhando o problema.</li> <li>\ud83d\udca1 Sugerindo Melhorias ou Novas Funcionalidades: Tem uma ideia para tornar o PixCore ainda melhor? Adorar\u00edamos ouvi-la! Crie uma Issue para descrever sua sugest\u00e3o.</li> <li>\ud83d\udcd6 Melhorando a Documenta\u00e7\u00e3o: Se voc\u00ea encontrou um erro de digita\u00e7\u00e3o, uma explica\u00e7\u00e3o confusa ou acredita que uma se\u00e7\u00e3o pode ser melhorada, sinta-se \u00e0 vontade para propor altera\u00e7\u00f5es.</li> <li>\ud83d\udcbb Escrevendo C\u00f3digo: Voc\u00ea pode corrigir um bug existente ou implementar uma nova funcionalidade.</li> </ul>"},{"location":"3.%20Contribui%C3%A7%C3%A3o/#configurando-o-ambiente-de-desenvolvimento","title":"Configurando o Ambiente de Desenvolvimento","text":"<p>Para garantir que voc\u00ea tenha um ambiente de desenvolvimento limpo e consistente, o projeto utiliza Poetry para gerenciar depend\u00eancias e ambientes virtuais.</p> <p>Siga os passos abaixo para configurar seu ambiente local:</p> <ol> <li> <p>Fa\u00e7a um Fork do Reposit\u00f3rio     Clique no bot\u00e3o \"Fork\" no canto superior direito da p\u00e1gina do reposit\u00f3rio no GitHub.</p> </li> <li> <p>Clone o seu Fork     Em seu terminal, clone o reposit\u00f3rio que voc\u00ea acabou de \"forkar\":     <pre><code>git clone [https://github.com/gustjose/pixcore.git](https://github.com/gustjose/pixcore.git)\ncd pixcore\n</code></pre></p> </li> <li> <p>Instale as Depend\u00eancias com Poetry     Se voc\u00ea ainda n\u00e3o tem o Poetry, siga as instru\u00e7\u00f5es de instala\u00e7\u00e3o. Com o Poetry instalado, execute o comando abaixo para instalar todas as depend\u00eancias do projeto, incluindo as de desenvolvimento (<code>pytest</code>, <code>black</code>, etc.):     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Ative o Ambiente Virtual     Para ativar o ambiente virtual gerenciado pelo Poetry, utilize o comando:     <pre><code>poetry shell\n</code></pre>     Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a codificar!</p> </li> </ol>"},{"location":"3.%20Contribui%C3%A7%C3%A3o/#fluxo-de-trabalho-para-contribuicao-de-codigo","title":"Fluxo de Trabalho para Contribui\u00e7\u00e3o de C\u00f3digo","text":"<ol> <li>Crie uma Nova Branch     Sempre trabalhe em uma nova branch para manter o hist\u00f3rico organizado. Escolha um nome descritivo para ela.</li> </ol> <pre><code># Exemplo para uma nova funcionalidade\ngit checkout -b feature/adiciona-suporte-a-campo-x\n\n# Exemplo para uma corre\u00e7\u00e3o de bug\ngit checkout -b fix/corrige-calculo-crc16\n</code></pre> <ol> <li> <p>Escreva seu C\u00f3digo     Fa\u00e7a as altera\u00e7\u00f5es ou adi\u00e7\u00f5es necess\u00e1rias no c\u00f3digo. Lembre-se de seguir o estilo e a arquitetura existentes.</p> </li> <li> <p>Garanta a Qualidade do C\u00f3digo     Antes de submeter sua contribui\u00e7\u00e3o, rode as ferramentas de qualidade para formatar e verificar seu c\u00f3digo.</p> </li> </ol> <pre><code>task lint\n</code></pre> <ol> <li>Execute os Testes     \u00c9 fundamental que todos os testes passem antes de voc\u00ea criar um Pull Request. Adicione novos testes se voc\u00ea estiver implementando uma nova funcionalidade.</li> </ol> <pre><code>task test\n</code></pre> <ol> <li>Envie seu Pull Request (PR)     Ap\u00f3s fazer o commit das suas altera\u00e7\u00f5es, envie-as para o seu fork e abra um Pull Request para a branch <code>main</code> do reposit\u00f3rio original. <pre><code>git push origin nome-da-sua-branch\n</code></pre> Ao abrir o PR, forne\u00e7a um t\u00edtulo claro e uma descri\u00e7\u00e3o detalhada do que foi feito. Se sua altera\u00e7\u00e3o resolve uma Issue existente, mencione-a na descri\u00e7\u00e3o (ex: <code>Resolve #123</code>).</li> </ol>"},{"location":"3.%20Contribui%C3%A7%C3%A3o/#codigo-de-conduta","title":"C\u00f3digo de Conduta","text":"<p>Embora ainda n\u00e3o tenhamos um arquivo formal de C\u00f3digo de Conduta, pedimos que todas as intera\u00e7\u00f5es neste projeto (issues, pull requests, etc.) sejam feitas de forma respeitosa, construtiva e amig\u00e1vel.</p> <p>Obrigado por dedicar seu tempo e talento ao PixCore!</p>"},{"location":"4.%20Sobre/","title":"4. Sobre","text":"<p>Esta p\u00e1gina conta um pouco da hist\u00f3ria e da filosofia por tr\u00e1s do projeto PixCore, al\u00e9m de informa\u00e7\u00f5es sobre a licen\u00e7a de uso e como entrar em contato.</p>"},{"location":"4.%20Sobre/#a-motivacao-por-tras-do-projeto","title":"A Motiva\u00e7\u00e3o por Tr\u00e1s do Projeto","text":"<p>A gera\u00e7\u00e3o de cobran\u00e7as via Pix, embora padronizada pelo Banco Central, muitas vezes envolve a manipula\u00e7\u00e3o de strings complexas, c\u00e1lculos de checksum (CRC16) e a montagem de um payload que pode ser propenso a erros.</p> <p>O PixCore nasceu da necessidade de uma ferramenta para desenvolvedores Python que fosse, ao mesmo tempo, poderosa e incrivelmente simples de usar. O objetivo era abstrair toda a complexidade do padr\u00e3o BR Code, oferecendo uma API limpa, direta e bem documentada.</p> <p>Quer\u00edamos criar uma biblioteca que: - Permitisse a um desenvolvedor j\u00fanior gerar um QR Code em menos de 5 minutos. - Oferecesse flexibilidade para customiza\u00e7\u00f5es visuais (cores e logo). - Fosse robusta, validando os dados de entrada para prevenir erros antes que eles aconte\u00e7am. - Tivesse depend\u00eancias m\u00ednimas e fosse f\u00e1cil de instalar em qualquer ambiente.</p>"},{"location":"4.%20Sobre/#nossa-filosofia","title":"Nossa Filosofia","text":"<p>O desenvolvimento do PixCore \u00e9 guiado por alguns princ\u00edpios fundamentais:</p> <ul> <li>Simplicidade Acima de Tudo: A interface deve ser intuitiva. Menos \u00e9 mais.</li> <li>Valida\u00e7\u00e3o Proativa: \u00c9 melhor falhar cedo com uma mensagem de erro clara do que gerar um QR Code inv\u00e1lido silenciosamente. A classe <code>PixData</code> \u00e9 o cora\u00e7\u00e3o dessa filosofia.</li> <li>Documenta\u00e7\u00e3o \u00e9 Essencial: Um c\u00f3digo bem documentado \u00e9 um c\u00f3digo que respeita o tempo de quem o utiliza. A documenta\u00e7\u00e3o deve ser um guia completo e pr\u00e1tico.</li> <li>Flexibilidade para o Desenvolvedor: Oferecer tanto um m\u00e9todo r\u00e1pido para salvar arquivos (<code>.save_qrcode()</code>) quanto um m\u00e9todo para manipula\u00e7\u00e3o em mem\u00f3ria (<code>.qrcode()</code>) d\u00e1 ao usu\u00e1rio o poder de escolher a melhor abordagem para seu caso de uso.</li> </ul>"},{"location":"4.%20Sobre/#sobre-o-autor","title":"Sobre o Autor","text":"<p>O PixCore \u00e9 um projeto de c\u00f3digo aberto criado e mantido por Gustavo Jos\u00e9. Voc\u00ea pode me encontrar e acompanhar outros projetos atrav\u00e9s dos meus perfis:</p> <ul> <li>GitHub: gustjose</li> </ul>"},{"location":"4.%20Sobre/#licenca","title":"Licen\u00e7a","text":"<p>O PixCore \u00e9 um software de c\u00f3digo aberto distribu\u00eddo sob a Licen\u00e7a MIT.</p> <p>Isso significa que voc\u00ea tem total liberdade para usar, copiar, modificar, mesclar, publicar, distribuir, sublicenciar e/ou vender c\u00f3pias do software, desde que o aviso de copyright e a declara\u00e7\u00e3o de permiss\u00e3o sejam inclu\u00eddos em todas as c\u00f3pias ou partes substanciais do software.</p> <p>Para ler o texto completo da licen\u00e7a, clique aqui.</p>"},{"location":"4.%20Sobre/#contato","title":"Contato","text":"<ul> <li>Bugs e Sugest\u00f5es: A melhor forma de entrar em contato para relatar bugs ou sugerir novas funcionalidades \u00e9 atrav\u00e9s das Issues do GitHub.</li> <li>Outros Assuntos: Para outras quest\u00f5es, sinta-se \u00e0 vontade para me contatar atrav\u00e9s dos links de perfil acima.</li> </ul>"},{"location":"changelog/","title":"Hist\u00f3rico de Vers\u00f5es","text":""},{"location":"changelog/#011","title":"0.1.1","text":"<p>Vers\u00e3o publicada em 08/08/2025 </p>"},{"location":"changelog/#o-que-ha-de-novo","title":"O que h\u00e1 de novo?","text":"<ul> <li>Documenta\u00e7\u00e3o atualizada: documenta\u00e7\u00e3o foi revisada para tornar a integra\u00e7\u00e3o com seu projeto ainda mais simples.\r \r</li> </ul>"},{"location":"changelog/#correcoes","title":"Corre\u00e7\u00f5es:","text":"<ul> <li>Valida\u00e7\u00e3o: altera\u00e7\u00f5es de valida\u00e7\u00e3o da 'dataclass'.\r \r</li> </ul>"},{"location":"changelog/#contribuicoes","title":"Contribui\u00e7\u00f5es:","text":"<ul> <li>Corre\u00e7\u00e3o de Valida\u00e7\u00e3o por @AndersonCostaDev01 in https://github.com/gustjose/pixcore/pull/2</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>Vers\u00e3o publicada em 27/07/2025 Full Changelog: https://github.com/gustjose/pixcore/commits/0.1.0</p>"},{"location":"api/Constantes/","title":"Constantes","text":"<p>M\u00f3dulo de Constantes para o BR Code Pix.</p> <p>Este arquivo centraliza todos os identificadores (IDs/Tags) e valores fixos utilizados na constru\u00e7\u00e3o do payload do BR Code, conforme as especifica\u00e7\u00f5es do padr\u00e3o EMV\u00ae Merchant Presented Mode (MPM) utilizado pelo Pix.</p> <p>A centraliza\u00e7\u00e3o desses valores facilita a manuten\u00e7\u00e3o e garante consist\u00eancia na gera\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"api/Modelos/","title":"Modelos","text":""},{"location":"api/Modelos/#pixcore.models.PixData","title":"<code>PixData</code>  <code>dataclass</code>","text":"<p>Representa e valida todos os dados para a gera\u00e7\u00e3o de um BR Code Pix.</p> <p>Esta dataclass serve como um cont\u00eainer estruturado para os campos obrigat\u00f3rios e opcionais do padr\u00e3o EMV\u00ae QRCPS, aplicando valida\u00e7\u00f5es autom\u00e1ticas na inicializa\u00e7\u00e3o do objeto para garantir a conformidade e integridade dos dados.</p> <p>Attributes:</p> Name Type Description <code>recebedor_nome</code> <code>str</code> <p>Nome do recebedor/comerciante (at\u00e9 25 caracteres).</p> <code>recebedor_cidade</code> <code>str</code> <p>Cidade do recebedor/comerciante (at\u00e9 15 caracteres).</p> <code>pix_key</code> <code>str</code> <p>Chave Pix do recebedor (e-mail, CPF/CNPJ, celular ou chave aleat\u00f3ria). M\u00e1ximo de 77 caracteres.</p> <code>valor</code> <code>Optional[float]</code> <p>O valor da transa\u00e7\u00e3o. Se for <code>None</code>, o QR Code ser\u00e1 gerado sem valor fixo,                      permitindo que o pagador insira o valor.</p> <code>transacao_id</code> <code>str</code> <p>Identificador da transa\u00e7\u00e3o (TXID). Deve ter entre 1 e 25 caracteres alfanum\u00e9ricos.                 O padr\u00e3o '***' indica que n\u00e3o \u00e9 utilizado.</p> <code>ponto_iniciacao_metodo</code> <code>Optional[str]</code> <p>Define se o QR Code \u00e9 est\u00e1tico ('12') ou din\u00e2mico ('11').                                     Se <code>None</code>, o campo n\u00e3o \u00e9 inclu\u00eddo no payload.</p> <code>receptor_categoria_code</code> <code>str</code> <p>C\u00f3digo da categoria do comerciante (\"Merchant Category Code\" - MCC).                            Padr\u00e3o: \"0000\".</p> <code>recebedor_cep</code> <code>Optional[str]</code> <p>CEP do comerciante, deve conter 8 d\u00edgitos.</p> <code>info_adicional</code> <code>Optional[str]</code> <p>Campo de texto livre para informa\u00e7\u00f5es adicionais (n\u00e3o usado diretamente                             na gera\u00e7\u00e3o padr\u00e3o do BR Code, mas pode ser \u00fatil para o sistema).</p> <code>idioma_preferencia</code> <code>Optional[str]</code> <p>Idioma para dados alternativos (ex: \"PT\").</p> <code>recebedor_nome_alt</code> <code>Optional[str]</code> <p>Nome alternativo do recebedor (em outro idioma).</p> <code>recebedor_cidade_alt</code> <code>Optional[str]</code> <p>Cidade alternativa do recebedor (em outro idioma).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Se qualquer um dos campos obrigat\u00f3rios n\u00e3o atender \u00e0s regras         de valida\u00e7\u00e3o (ex: comprimento, formato).</p> <p>Examples:</p> <p>Criando uma inst\u00e2ncia v\u00e1lida de PixData:</p> <pre><code>&gt;&gt;&gt; dados_validos = PixData(\n...     recebedor_nome=\"EMPRESA MODELO\",\n...     recebedor_cidade=\"SAO PAULO\",\n...     pix_key=\"123e4567-e89b-12d3-a456-426655440000\",\n...     valor=10.50,\n...     transacao_id=\"TXID12345\"\n... )\n&gt;&gt;&gt; print(dados_validos.recebedor_nome)\nEMPRESA MODELO\n</code></pre> <p>Tentando criar uma inst\u00e2ncia com dados inv\u00e1lidos:</p> <pre><code>&gt;&gt;&gt; try:\n...     dados_invalidos = PixData(\n...         recebedor_nome=\"NOME EXTREMAMENTE LONGO QUE EXCEDE O LIMITE\",\n...         recebedor_cidade=\"SAO PAULO\",\n...         pix_key=\"chave-pix\"\n...     )\n... except ValueError as e:\n...     print(e)\nO nome do recebedor (recebedor_nome) \u00e9 obrigat\u00f3rio e deve ter at\u00e9 25 bytes.\n</code></pre> Source code in <code>src\\pixcore\\models.py</code> <pre><code>@dataclass\nclass PixData:\n    \"\"\"\n    Representa e valida todos os dados para a gera\u00e7\u00e3o de um BR Code Pix.\n\n    Esta dataclass serve como um cont\u00eainer estruturado para os campos\n    obrigat\u00f3rios e opcionais do padr\u00e3o EMV\u00ae QRCPS, aplicando valida\u00e7\u00f5es\n    autom\u00e1ticas na inicializa\u00e7\u00e3o do objeto para garantir a conformidade\n    e integridade dos dados.\n\n    Attributes:\n        recebedor_nome (str): Nome do recebedor/comerciante (at\u00e9 25 caracteres).\n        recebedor_cidade (str): Cidade do recebedor/comerciante (at\u00e9 15 caracteres).\n        pix_key (str): Chave Pix do recebedor (e-mail, CPF/CNPJ, celular ou chave aleat\u00f3ria). M\u00e1ximo de 77 caracteres.\n        valor (Optional[float]): O valor da transa\u00e7\u00e3o. Se for `None`, o QR Code ser\u00e1 gerado sem valor fixo,\n                                 permitindo que o pagador insira o valor.\n        transacao_id (str): Identificador da transa\u00e7\u00e3o (TXID). Deve ter entre 1 e 25 caracteres alfanum\u00e9ricos.\n                            O padr\u00e3o '***' indica que n\u00e3o \u00e9 utilizado.\n        ponto_iniciacao_metodo (Optional[str]): Define se o QR Code \u00e9 est\u00e1tico ('12') ou din\u00e2mico ('11').\n                                                Se `None`, o campo n\u00e3o \u00e9 inclu\u00eddo no payload.\n        receptor_categoria_code (str): C\u00f3digo da categoria do comerciante (\"Merchant Category Code\" - MCC).\n                                       Padr\u00e3o: \"0000\".\n        recebedor_cep (Optional[str]): CEP do comerciante, deve conter 8 d\u00edgitos.\n        info_adicional (Optional[str]): Campo de texto livre para informa\u00e7\u00f5es adicionais (n\u00e3o usado diretamente\n                                        na gera\u00e7\u00e3o padr\u00e3o do BR Code, mas pode ser \u00fatil para o sistema).\n        idioma_preferencia (Optional[str]): Idioma para dados alternativos (ex: \"PT\").\n        recebedor_nome_alt (Optional[str]): Nome alternativo do recebedor (em outro idioma).\n        recebedor_cidade_alt (Optional[str]): Cidade alternativa do recebedor (em outro idioma).\n\n    Raises:\n        ValueError: Se qualquer um dos campos obrigat\u00f3rios n\u00e3o atender \u00e0s regras\n                    de valida\u00e7\u00e3o (ex: comprimento, formato).\n\n    Examples:\n        Criando uma inst\u00e2ncia v\u00e1lida de PixData:\n        &gt;&gt;&gt; dados_validos = PixData(\n        ...     recebedor_nome=\"EMPRESA MODELO\",\n        ...     recebedor_cidade=\"SAO PAULO\",\n        ...     pix_key=\"123e4567-e89b-12d3-a456-426655440000\",\n        ...     valor=10.50,\n        ...     transacao_id=\"TXID12345\"\n        ... )\n        &gt;&gt;&gt; print(dados_validos.recebedor_nome)\n        EMPRESA MODELO\n\n        Tentando criar uma inst\u00e2ncia com dados inv\u00e1lidos:\n        &gt;&gt;&gt; try:\n        ...     dados_invalidos = PixData(\n        ...         recebedor_nome=\"NOME EXTREMAMENTE LONGO QUE EXCEDE O LIMITE\",\n        ...         recebedor_cidade=\"SAO PAULO\",\n        ...         pix_key=\"chave-pix\"\n        ...     )\n        ... except ValueError as e:\n        ...     print(e)\n        O nome do recebedor (recebedor_nome) \u00e9 obrigat\u00f3rio e deve ter at\u00e9 25 bytes.\n    \"\"\"\n\n    recebedor_nome: str\n    recebedor_cidade: str\n    pix_key: str\n    valor: Optional[float] = None\n    transacao_id: str = \"***\"\n    ponto_iniciacao_metodo: Optional[str] = None\n    receptor_categoria_code: str = \"0000\"\n    recebedor_cep: Optional[str] = None\n    info_adicional: Optional[str] = None\n    idioma_preferencia: Optional[str] = None\n    recebedor_nome_alt: Optional[str] = None\n    recebedor_cidade_alt: Optional[str] = None\n\n    def __post_init__(self):\n\n        if not self.recebedor_nome or len(self.recebedor_nome.encode('utf-8')) &gt; 25 or len(self.recebedor_nome) &lt; 3:\n            raise ValueError(\"O nome do recebedor (recebedor_nome) \u00e9 obrigat\u00f3rio e deve ter entre 3 e 25 bytes.\")\n\n        if not self.recebedor_cidade or len(self.recebedor_cidade.encode('utf-8')) &gt; 15 or len(self.recebedor_cidade) &lt; 3:\n            raise ValueError(\"A cidade do recebedor (recebedor_cidade) \u00e9 obrigat\u00f3ria e deve ter entre 3 e 15 bytes.\")\n\n        if self.transacao_id != '***' and not re.match(r'^[a-zA-Z0-9]{1,25}$', self.transacao_id):\n            raise ValueError(\"O ID da Transa\u00e7\u00e3o (transacao_id) deve ser alfanum\u00e9rico com at\u00e9 25 caracteres.\")\n\n        if not self.pix_key or len(self.pix_key) &gt; 77 or len(self.pix_key) &lt; 10: \n            raise ValueError(\"A chave Pix (pix_key) \u00e9 obrigat\u00f3ria e deve ter at\u00e9 77 caracteres.\")\n\n        if self.valor is not None and self.valor &lt;= 0:\n            raise ValueError(\"O valor (valor), se presente, deve ser positivo.\")\n\n        if self.recebedor_cep and not re.match(r'^\\d{8}$', self.recebedor_cep):\n            raise ValueError(\"O CEP (recebedor_cep) deve conter 8 d\u00edgitos num\u00e9ricos.\")\n</code></pre>"},{"location":"api/Payload%20Pix/","title":"Payload Pix","text":""},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix","title":"<code>Pix</code>","text":"<p>Classe principal para a gera\u00e7\u00e3o do payload e do QR Code para pagamentos Pix.</p> <p>Esta classe encapsula toda a l\u00f3gica necess\u00e1ria para criar um BR Code Pix em conformidade com as especifica\u00e7\u00f5es do Banco Central do Brasil. Permite a gera\u00e7\u00e3o do payload em formato string e a cria\u00e7\u00e3o de uma imagem de QR Code customiz\u00e1vel.</p> <p>Parameters:</p> Name Type Description Default <code>pix_data</code> <code>PixData</code> <p>Objeto do tipo PixData contendo todas as informa\u00e7\u00f5es necess\u00e1rias para a gera\u00e7\u00e3o do Pix.</p> required Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>class Pix:\n    \"\"\"\n    Classe principal para a gera\u00e7\u00e3o do payload e do QR Code para pagamentos Pix.\n\n    Esta classe encapsula toda a l\u00f3gica necess\u00e1ria para criar um BR Code Pix\n    em conformidade com as especifica\u00e7\u00f5es do Banco Central do Brasil.\n    Permite a gera\u00e7\u00e3o do payload em formato string e a cria\u00e7\u00e3o de uma imagem\n    de QR Code customiz\u00e1vel.\n\n    Parameters:\n        pix_data (PixData): Objeto do tipo PixData contendo todas as informa\u00e7\u00f5es necess\u00e1rias para a gera\u00e7\u00e3o do Pix.\n    \"\"\"\n    def __init__(self, pix_data: PixData):\n        self.pix_data = pix_data\n\n    def _build_merchant_account_info(self) -&gt; str:\n        gui = utils.format_tlv(const.ID_GUI, const.GUI_BR_BCB_PIX)\n        pix_key = utils.format_tlv(const.ID_PIX_KEY, self.pix_data.pix_key)\n\n        value = f\"{gui}{pix_key}\"\n\n        return utils.format_tlv(const.ID_MERCHANT_ACCOUNT_INFORMATION, value)\n\n    def _build_additional_data(self) -&gt; str:\n        txid = utils.format_tlv(const.ID_TRANSACTION_ID, self.pix_data.transacao_id)\n        return utils.format_tlv(const.ID_ADDITIONAL_DATA_FIELD_TEMPLATE, txid)\n\n    def _build_language_template(self) -&gt; str:\n        parts = []\n        if self.pix_data.idioma_preferencia:\n            parts.append(utils.format_tlv(const.ID_LANGUAGE_PREFERENCE, self.pix_data.idioma_preferencia))\n        if self.pix_data.recebedor_nome_alt:\n            parts.append(utils.format_tlv(const.ID_MERCHANT_NAME_ALT, self.pix_data.recebedor_nome_alt))\n        if self.pix_data.recebedor_cidade_alt:\n            parts.append(utils.format_tlv(const.ID_MERCHANT_CITY_ALT, self.pix_data.recebedor_cidade_alt))\n\n        if not parts:\n            return \"\"\n\n        return utils.format_tlv(const.ID_MERCHANT_INFO_LANGUAGE_TEMPLATE, \"\".join(parts))\n\n    def payload(self) -&gt; str:\n        \"\"\"\n        Gera o payload completo do BR Code no formato TLV (Copia e Cola).\n\n        O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as\n        informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.\n\n        Returns:\n            str: O payload completo e formatado, incluindo o CRC16.\n\n        Examples:\n            &gt;&gt;&gt; pix_data = PixData(...)\n            &gt;&gt;&gt; pix_generator = Pix(pix_data)\n            &gt;&gt;&gt; br_code = pix_generator.payload()\n            &gt;&gt;&gt; print(br_code)\n            '00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n        \"\"\"\n        payload_parts = [\n            utils.format_tlv(const.ID_PAYLOAD_FORMAT_INDICATOR, const.PAYLOAD_FORMAT_INDICATOR_VALUE),\n        ]\n\n        if self.pix_data.ponto_iniciacao_metodo:\n            payload_parts.append(utils.format_tlv(const.ID_POINT_OF_INITIATION_METHOD, self.pix_data.ponto_iniciacao_metodo))\n\n        payload_parts.extend([\n            self._build_merchant_account_info(),\n            utils.format_tlv(const.ID_MERCHANT_CATEGORY_CODE, self.pix_data.receptor_categoria_code),\n            utils.format_tlv(const.ID_TRANSACTION_CURRENCY, const.TRANSACTION_CURRENCY_BRL),\n        ])\n\n        if self.pix_data.valor:\n            amount_str = f\"{self.pix_data.valor:.2f}\"\n            payload_parts.append(utils.format_tlv(const.ID_TRANSACTION_AMOUNT, amount_str))\n\n        payload_parts.extend([\n            utils.format_tlv(const.ID_COUNTRY_CODE, const.COUNTRY_CODE_BR),\n            utils.format_tlv(const.ID_MERCHANT_NAME, self.pix_data.recebedor_nome),\n            utils.format_tlv(const.ID_MERCHANT_CITY, self.pix_data.recebedor_cidade),\n        ])\n\n        if self.pix_data.recebedor_cep:\n            payload_parts.append(utils.format_tlv(const.ID_POSTAL_CODE, self.pix_data.recebedor_cep))\n\n        payload_parts.extend([\n            self._build_additional_data(),\n            self._build_language_template()\n        ])\n\n        payload = \"\".join(filter(None, payload_parts))\n\n        crc = utils.calculate_crc16(payload + const.ID_CRC16 + \"04\")\n        payload += utils.format_tlv(const.ID_CRC16, crc)\n\n        return payload\n\n    def qrcode(self, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\") -&gt; Image.Image:\n        \"\"\"\n        Gera um objeto de imagem (Pillow) do QR Code a partir do payload.\n\n        Args:\n            caminho_logo (str, optional): O caminho para um arquivo de imagem (ex: .png)\n                                          a ser centralizado no QR Code. Defaults to None.\n            cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor\n                                    (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").\n                                    Defaults to \"black\".\n            cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n\n        Returns:\n            Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.\n        \"\"\"\n        payload_str = self.payload()\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_H,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(payload_str)\n        qr.make(fit=True)\n\n        img_qr = qr.make_image(fill_color=cor_qr, back_color=cor_fundo).convert('RGB')\n\n        if caminho_logo:\n            try:\n                logo = Image.open(caminho_logo)\n                tamanho_max_logo = int(img_qr.size[0] * 0.25)\n                logo.thumbnail((tamanho_max_logo, tamanho_max_logo))\n\n                pos_x = (img_qr.size[0] - logo.size[0]) // 2\n                pos_y = (img_qr.size[1] - logo.size[1]) // 2\n\n                img_qr.paste(logo, (pos_x, pos_y), mask=logo)\n            except FileNotFoundError:\n                print(f\"Aviso: Logo n\u00e3o encontrado em '{caminho_logo}'. Gerando sem logo.\")\n            except Exception as e:\n                print(f\"Aviso: Erro ao processar o logo: {e}. Gerando sem logo.\")\n\n        return img_qr\n\n    def save_qrcode(self, caminho_arquivo_saida: str, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\"):\n        \"\"\"\n        Gera e salva a imagem do QR Code diretamente em um arquivo.\n\n        Args:\n            caminho_arquivo_saida (str): O caminho e nome do arquivo onde a imagem\n                                         do QR Code ser\u00e1 salva (ex: 'output/pix.png').\n            caminho_logo (str, optional): O caminho para um arquivo de imagem a ser\n                                          centralizado no QR Code. Defaults to None.\n            cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".\n            cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n\n        Examples:\n            &gt;&gt;&gt; pix_data = PixData(...)\n            &gt;&gt;&gt; pix_generator = Pix(pix_data)\n            &gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\n            QR Code salvo com sucesso em: meu_pix_qr.png\n        \"\"\"\n        imagem_qr = self.qrcode(caminho_logo=caminho_logo, cor_qr=cor_qr, cor_fundo=cor_fundo)\n        imagem_qr.save(caminho_arquivo_saida)\n        print(f\"QR Code salvo com sucesso em: {caminho_arquivo_saida}\")\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.payload","title":"<code>payload()</code>","text":"<p>Gera o payload completo do BR Code no formato TLV (Copia e Cola).</p> <p>O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>O payload completo e formatado, incluindo o CRC16.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pix_data = PixData(...)\n&gt;&gt;&gt; pix_generator = Pix(pix_data)\n&gt;&gt;&gt; br_code = pix_generator.payload()\n&gt;&gt;&gt; print(br_code)\n'00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n</code></pre> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def payload(self) -&gt; str:\n    \"\"\"\n    Gera o payload completo do BR Code no formato TLV (Copia e Cola).\n\n    O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as\n    informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.\n\n    Returns:\n        str: O payload completo e formatado, incluindo o CRC16.\n\n    Examples:\n        &gt;&gt;&gt; pix_data = PixData(...)\n        &gt;&gt;&gt; pix_generator = Pix(pix_data)\n        &gt;&gt;&gt; br_code = pix_generator.payload()\n        &gt;&gt;&gt; print(br_code)\n        '00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n    \"\"\"\n    payload_parts = [\n        utils.format_tlv(const.ID_PAYLOAD_FORMAT_INDICATOR, const.PAYLOAD_FORMAT_INDICATOR_VALUE),\n    ]\n\n    if self.pix_data.ponto_iniciacao_metodo:\n        payload_parts.append(utils.format_tlv(const.ID_POINT_OF_INITIATION_METHOD, self.pix_data.ponto_iniciacao_metodo))\n\n    payload_parts.extend([\n        self._build_merchant_account_info(),\n        utils.format_tlv(const.ID_MERCHANT_CATEGORY_CODE, self.pix_data.receptor_categoria_code),\n        utils.format_tlv(const.ID_TRANSACTION_CURRENCY, const.TRANSACTION_CURRENCY_BRL),\n    ])\n\n    if self.pix_data.valor:\n        amount_str = f\"{self.pix_data.valor:.2f}\"\n        payload_parts.append(utils.format_tlv(const.ID_TRANSACTION_AMOUNT, amount_str))\n\n    payload_parts.extend([\n        utils.format_tlv(const.ID_COUNTRY_CODE, const.COUNTRY_CODE_BR),\n        utils.format_tlv(const.ID_MERCHANT_NAME, self.pix_data.recebedor_nome),\n        utils.format_tlv(const.ID_MERCHANT_CITY, self.pix_data.recebedor_cidade),\n    ])\n\n    if self.pix_data.recebedor_cep:\n        payload_parts.append(utils.format_tlv(const.ID_POSTAL_CODE, self.pix_data.recebedor_cep))\n\n    payload_parts.extend([\n        self._build_additional_data(),\n        self._build_language_template()\n    ])\n\n    payload = \"\".join(filter(None, payload_parts))\n\n    crc = utils.calculate_crc16(payload + const.ID_CRC16 + \"04\")\n    payload += utils.format_tlv(const.ID_CRC16, crc)\n\n    return payload\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.qrcode","title":"<code>qrcode(caminho_logo=None, cor_qr='black', cor_fundo='white')</code>","text":"<p>Gera um objeto de imagem (Pillow) do QR Code a partir do payload.</p> <p>Parameters:</p> Name Type Description Default <code>caminho_logo</code> <code>str</code> <p>O caminho para um arquivo de imagem (ex: .png)                           a ser centralizado no QR Code. Defaults to None.</p> <code>None</code> <code>cor_qr</code> <code>str</code> <p>A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor                     (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").                     Defaults to \"black\".</p> <code>'black'</code> <code>cor_fundo</code> <code>str</code> <p>A cor de fundo do QR Code. Defaults to \"white\".</p> <code>'white'</code> <p>Returns:</p> Type Description <code>Image</code> <p>Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.</p> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def qrcode(self, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\") -&gt; Image.Image:\n    \"\"\"\n    Gera um objeto de imagem (Pillow) do QR Code a partir do payload.\n\n    Args:\n        caminho_logo (str, optional): O caminho para um arquivo de imagem (ex: .png)\n                                      a ser centralizado no QR Code. Defaults to None.\n        cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor\n                                (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").\n                                Defaults to \"black\".\n        cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n\n    Returns:\n        Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.\n    \"\"\"\n    payload_str = self.payload()\n\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_H,\n        box_size=10,\n        border=4,\n    )\n    qr.add_data(payload_str)\n    qr.make(fit=True)\n\n    img_qr = qr.make_image(fill_color=cor_qr, back_color=cor_fundo).convert('RGB')\n\n    if caminho_logo:\n        try:\n            logo = Image.open(caminho_logo)\n            tamanho_max_logo = int(img_qr.size[0] * 0.25)\n            logo.thumbnail((tamanho_max_logo, tamanho_max_logo))\n\n            pos_x = (img_qr.size[0] - logo.size[0]) // 2\n            pos_y = (img_qr.size[1] - logo.size[1]) // 2\n\n            img_qr.paste(logo, (pos_x, pos_y), mask=logo)\n        except FileNotFoundError:\n            print(f\"Aviso: Logo n\u00e3o encontrado em '{caminho_logo}'. Gerando sem logo.\")\n        except Exception as e:\n            print(f\"Aviso: Erro ao processar o logo: {e}. Gerando sem logo.\")\n\n    return img_qr\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.save_qrcode","title":"<code>save_qrcode(caminho_arquivo_saida, caminho_logo=None, cor_qr='black', cor_fundo='white')</code>","text":"<p>Gera e salva a imagem do QR Code diretamente em um arquivo.</p> <p>Parameters:</p> Name Type Description Default <code>caminho_arquivo_saida</code> <code>str</code> <p>O caminho e nome do arquivo onde a imagem                          do QR Code ser\u00e1 salva (ex: 'output/pix.png').</p> required <code>caminho_logo</code> <code>str</code> <p>O caminho para um arquivo de imagem a ser                           centralizado no QR Code. Defaults to None.</p> <code>None</code> <code>cor_qr</code> <code>str</code> <p>A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".</p> <code>'black'</code> <code>cor_fundo</code> <code>str</code> <p>A cor de fundo do QR Code. Defaults to \"white\".</p> <code>'white'</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pix_data = PixData(...)\n&gt;&gt;&gt; pix_generator = Pix(pix_data)\n&gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\nQR Code salvo com sucesso em: meu_pix_qr.png\n</code></pre> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def save_qrcode(self, caminho_arquivo_saida: str, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\"):\n    \"\"\"\n    Gera e salva a imagem do QR Code diretamente em um arquivo.\n\n    Args:\n        caminho_arquivo_saida (str): O caminho e nome do arquivo onde a imagem\n                                     do QR Code ser\u00e1 salva (ex: 'output/pix.png').\n        caminho_logo (str, optional): O caminho para um arquivo de imagem a ser\n                                      centralizado no QR Code. Defaults to None.\n        cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".\n        cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n\n    Examples:\n        &gt;&gt;&gt; pix_data = PixData(...)\n        &gt;&gt;&gt; pix_generator = Pix(pix_data)\n        &gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\n        QR Code salvo com sucesso em: meu_pix_qr.png\n    \"\"\"\n    imagem_qr = self.qrcode(caminho_logo=caminho_logo, cor_qr=cor_qr, cor_fundo=cor_fundo)\n    imagem_qr.save(caminho_arquivo_saida)\n    print(f\"QR Code salvo com sucesso em: {caminho_arquivo_saida}\")\n</code></pre>"},{"location":"api/Utilidades/","title":"Utilidades","text":""},{"location":"api/Utilidades/#pixcore.utils.calculate_crc16","title":"<code>calculate_crc16(payload)</code>","text":"<p>Calcula o checksum CRC16-CCITT do payload.</p> <p>O c\u00e1lculo \u00e9 realizado conforme o padr\u00e3o EMV\u00ae QRCPS, que utiliza o polin\u00f4mio 0x1021 e valor inicial 0xFFFF. O resultado \u00e9 uma string hexadecimal de 4 caracteres.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>str</code> <p>O payload completo (sem o campo do CRC) para o qual o            checksum ser\u00e1 calculado.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>O checksum CRC16 calculado, formatado como uma string hexadecimal  de 4 caracteres mai\u00fasculos.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; payload_exemplo = \"00020126360014BR.GOV.BCB.PIX0114+5561999999999520400005303986540510.005802BR5913FULANO DE TAL6008BRASILIA62070503***6304\"\n&gt;&gt;&gt; calculate_crc16(payload_exemplo)\n'E3A2'\n</code></pre> Source code in <code>src\\pixcore\\utils.py</code> <pre><code>def calculate_crc16(payload: str) -&gt; str:\n    \"\"\"\n    Calcula o checksum CRC16-CCITT do payload.\n\n    O c\u00e1lculo \u00e9 realizado conforme o padr\u00e3o EMV\u00ae QRCPS, que utiliza o polin\u00f4mio\n    0x1021 e valor inicial 0xFFFF. O resultado \u00e9 uma string hexadecimal de 4\n    caracteres.\n\n    Args:\n        payload (str): O payload completo (sem o campo do CRC) para o qual o\n                       checksum ser\u00e1 calculado.\n\n    Returns:\n        str: O checksum CRC16 calculado, formatado como uma string hexadecimal\n             de 4 caracteres mai\u00fasculos.\n\n    Examples:\n        &gt;&gt;&gt; payload_exemplo = \"00020126360014BR.GOV.BCB.PIX0114+5561999999999520400005303986540510.005802BR5913FULANO DE TAL6008BRASILIA62070503***6304\"\n        &gt;&gt;&gt; calculate_crc16(payload_exemplo)\n        'E3A2'\n    \"\"\"\n    crc = 0xFFFF\n    polynomial = 0x1021\n\n    for byte in payload.encode('utf-8'):\n        crc ^= (byte &lt;&lt; 8)\n        for _ in range(8):\n            if (crc &amp; 0x8000):\n                crc = (crc &lt;&lt; 1) ^ polynomial\n            else:\n                crc &lt;&lt;= 1\n\n    return format(crc &amp; 0xFFFF, 'X').zfill(4)\n</code></pre>"},{"location":"api/Utilidades/#pixcore.utils.format_tlv","title":"<code>format_tlv(id_field, value)</code>","text":"<p>Formata um campo no padr\u00e3o TLV (Type-Length-Value).</p> <p>O formato TLV \u00e9 composto por: - ID (Type): Identificador do campo (2 d\u00edgitos). - Length: Tamanho do valor (2 d\u00edgitos). - Value: O dado em si.</p> <p>Parameters:</p> Name Type Description Default <code>id_field</code> <code>str</code> <p>O identificador do campo (ID ou \"Tag\").</p> required <code>value</code> <code>str</code> <p>O valor do campo.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string formatada em TLV. Ex: \"5913NOME DO LOJA\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_tlv(\"59\", \"EMPRESA MODELO\")\n'5914EMPRESA MODELO'\n&gt;&gt;&gt; format_tlv(\"53\", \"986\")\n'5303986'\n</code></pre> Source code in <code>src\\pixcore\\utils.py</code> <pre><code>def format_tlv(id_field: str, value: str) -&gt; str:\n    \"\"\"\n    Formata um campo no padr\u00e3o TLV (Type-Length-Value).\n\n    O formato TLV \u00e9 composto por:\n    - ID (Type): Identificador do campo (2 d\u00edgitos).\n    - Length: Tamanho do valor (2 d\u00edgitos).\n    - Value: O dado em si.\n\n    Args:\n        id_field (str): O identificador do campo (ID ou \"Tag\").\n        value (str): O valor do campo.\n\n    Returns:\n        str: A string formatada em TLV. Ex: \"5913NOME DO LOJA\".\n\n    Examples:\n        &gt;&gt;&gt; format_tlv(\"59\", \"EMPRESA MODELO\")\n        '5914EMPRESA MODELO'\n        &gt;&gt;&gt; format_tlv(\"53\", \"986\")\n        '5303986'\n    \"\"\"\n    length = str(len(value)).zfill(2)\n    return f\"{id_field}{length}{value}\"\n</code></pre>"}]}