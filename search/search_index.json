{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao PixCore","text":"<p>Este projeto \u00e9 uma biblioteca Python desenvolvida para simplificar e automatizar a cria\u00e7\u00e3o de BR Codes est\u00e1ticos para o Pix. Se voc\u00ea precisa gerar cobran\u00e7as Pix, seja para um e-commerce, um sistema de PDV ou qualquer outra aplica\u00e7\u00e3o, esta ferramenta foi feita para voc\u00ea.</p> <p>O principal objetivo \u00e9 fornecer uma interface clara e direta para gerar o payload (o famoso \"Pix Copia e Cola\") e o QR Code visual, seguindo rigorosamente as especifica\u00e7\u00f5es do Banco Central do Brasil (BACEN), a partir do Manual BR Code, e o padr\u00e3o EMV\u00ae QRCPS.</p>"},{"location":"#principais-funcionalidades","title":"Principais Funcionalidades","text":"<ul> <li>Gera\u00e7\u00e3o de Payload: Crie a string completa do \"Pix Copia e Cola\" (BR Code) que pode ser usada em qualquer aplicativo banc\u00e1rio.</li> <li>Cria\u00e7\u00e3o de QR Code: Gere a imagem do QR Code como um objeto <code>Pillow (PIL)</code>, permitindo f\u00e1cil manipula\u00e7\u00e3o e integra\u00e7\u00e3o com outras bibliotecas de imagem.</li> <li>Customiza\u00e7\u00e3o Visual: Adicione um logo ao centro do seu QR Code e personalize as cores de preenchimento e fundo.</li> </ul> <ul> <li> <p> In\u00edcio R\u00e1pido</p> <p>Dicas r\u00e1pidas para sair usando</p> </li> <li> <p> Tutorial</p> <p>Para quem quer aprender mais</p> </li> <li> <p> Contribuir</p> <p>Ajude a melhorar o projeto!</p> </li> <li> <p> Sobre</p> <p>Conhe\u00e7a mais sobre o projeto!</p> </li> </ul>"},{"location":"#gostou-do-projeto-apoie","title":"Gostou do projeto? Apoie!","text":"<p>Este \u00e9 um projeto de c\u00f3digo aberto, desenvolvido e mantido com dedica\u00e7\u00e3o no tempo livre. Se esta biblioteca foi \u00fatil para voc\u00ea ou sua empresa, considere fazer uma doa\u00e7\u00e3o para apoiar o desenvolvimento cont\u00ednuo, a corre\u00e7\u00e3o de bugs e a cria\u00e7\u00e3o de novas funcionalidades.</p> <p>Qualquer contribui\u00e7\u00e3o \u00e9 muito bem-vinda e me ajuda a continuar dedicando tempo a este e outros projetos open source.</p> Como Ajudar <p>A maneira mais simples e direta de apoiar \u00e9 via Pix. Se voc\u00ea gostou do projeto e quiser recompensar o meu trabalho de desenvolvimento e contribuir com o projeto, basta ler o payload no qrcode ao lado ou copiar o c\u00f3digo.</p> <p>Muito Obrigado por Contribuir!</p> Copiar PIX!"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/","title":"1. In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao guia de in\u00edcio r\u00e1pido do PixCore! Este tutorial mostrar\u00e1 os passos essenciais para voc\u00ea gerar seu primeiro payload e QR Code Pix de forma simples e direta.</p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-1-instalacao","title":"Passo 1: Instala\u00e7\u00e3o","text":"<p>Primeiro, certifique-se de que a biblioteca esteja instalada. Se ainda n\u00e3o a instalou, utilize o pip:</p> <pre><code>pip install pixcore\n</code></pre> <p>Isso instalar\u00e1 o pixcore e suas depend\u00eancias necess\u00e1rias, como qrcode e Pillow.</p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-2-importando-as-classes-principais","title":"Passo 2: Importando as Classes Principais","text":"<p>Para come\u00e7ar, voc\u00ea precisar\u00e1 importar duas classes centrais do projeto:</p> <ul> <li>PixData: Uma classe de dados para armazenar e validar todas as informa\u00e7\u00f5es da sua cobran\u00e7a.</li> <li>Pix: A classe principal que utiliza os dados do PixData para gerar o payload e o QR Code.</li> </ul> <pre><code>from pixcore import PixData\nfrom pixcore import Pix\n</code></pre>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-3-reunindo-e-validando-os-dados","title":"Passo 3: Reunindo e Validando os Dados","text":"<p>Agora, crie uma inst\u00e2ncia de PixData com as informa\u00e7\u00f5es do recebedor e da transa\u00e7\u00e3o. A grande vantagem \u00e9 que esta classe valida os dados automaticamente, garantindo que o nome n\u00e3o \u00e9 muito longo, que o valor \u00e9 positivo, etc., prevenindo erros antes mesmo da gera\u00e7\u00e3o do c\u00f3digo. <pre><code># Crie um objeto com os dados da cobran\u00e7a\n# Se houver algum dado inv\u00e1lido, um erro (ValueError) ser\u00e1 levantado aqui.\ntry:\n    dados_pix = PixData(\n        recebedor_nome=\"EMPRESA MODELO LTDA\",\n        recebedor_cidade=\"CIDADE EXEMPLO\",\n        pix_key=\"123e4567-e89b-12d3-a456-426655440000\", # Use uma chave pix v\u00e1lida aqui\n        valor=25.50,\n        transacao_id=\"ID.DA.SUA.TRANSACAO.123\"\n    )\nexcept ValueError as e:\n    print(f\"Erro nos dados fornecidos: {e}\")\n</code></pre></p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#parametros-para-geracao-do-pix-pixdata","title":"Par\u00e2metros para Gera\u00e7\u00e3o do Pix (<code>PixData</code>)","text":"<p>A tabela a seguir detalha todos os par\u00e2metros dispon\u00edveis ao criar uma inst\u00e2ncia de <code>PixData</code>.</p> Par\u00e2metro Obrigat\u00f3rio? Descri\u00e7\u00e3o Exemplo de Valor <code>recebedor_nome</code> Sim Nome do recebedor ou da empresa (3 a 25 caracteres). <code>\"EMPRESA MODELO\"</code> <code>recebedor_cidade</code> Sim Cidade da transa\u00e7\u00e3o ou do recebedor (3 a 15 caracteres). <code>\"SAO PAULO\"</code> <code>pix_key</code> Sim Chave Pix do recebedor (CPF, CNPJ, E-mail, Telefone ou Chave Aleat\u00f3ria). <code>\"seuemail@dominio.com\"</code> <code>valor</code> N\u00e3o Valor da transa\u00e7\u00e3o. Se n\u00e3o for definido, o pagador poder\u00e1 digitar o valor. <code>10.50</code> <code>transacao_id</code> N\u00e3o ID \u00fanico para a transa\u00e7\u00e3o (alfanum\u00e9rico, at\u00e9 25 caracteres). Padr\u00e3o: <code>***</code>. <code>\"PEDIDO12345\"</code> <code>ponto_iniciacao_metodo</code> N\u00e3o Define o tipo do QR Code: <code>'11'</code> para din\u00e2mico e <code>'12'</code> para est\u00e1tico. <code>\"12\"</code> <code>receptor_categoria_code</code> N\u00e3o C\u00f3digo da Categoria do Comerciante (MCC). Padr\u00e3o: <code>\"0000\"</code>. <code>\"5411\"</code> <code>recebedor_cep</code> N\u00e3o CEP do recebedor (deve conter 8 d\u00edgitos). <code>\"01001000\"</code> <code>idioma_preferencia</code> N\u00e3o Idioma para dados alternativos do recebedor. <code>\"pt_BR\"</code> <code>recebedor_nome_alt</code> N\u00e3o Nome alternativo do recebedor em outro idioma. <code>\"MODEL COMPANY\"</code> <code>recebedor_cidade_alt</code> N\u00e3o Cidade alternativa do recebedor em outro idioma. <code>\"SAO PAULO\"</code> <code>info_adicional</code> N\u00e3o Campo livre para informa\u00e7\u00f5es extras (n\u00e3o entra no payload padr\u00e3o). <code>\"Pagamento ref. NF 123\"</code>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#passo-4-gerando-o-payload-e-o-qr-code","title":"Passo 4: Gerando o Payload e o QR Code","text":"<p>Com os dados validados, passe o objeto dados_pix para a classe Pix. A partir da\u00ed, voc\u00ea pode gerar o payload (Pix Copia e Cola) ou salvar o QR Code diretamente em um arquivo. <pre><code># Instancie a classe principal com os dados validados\ngerador_pix = Pix(dados_pix)\n\n# Para obter o payload (Copia e Cola)\npayload = gerador_pix.payload()\nprint(\"Payload (Copia e Cola):\")\nprint(payload)\n\n# Para gerar e salvar o QR Code em um arquivo\nprint(\"\\nSalvando QR Code...\")\ngerador_pix.save_qrcode(\"meu_primeiro_pix.png\")\n</code></pre></p>"},{"location":"1.%20In%C3%ADcio%20R%C3%A1pido/#codigo-completo-exemplo-funcional","title":"C\u00f3digo Completo (Exemplo Funcional)","text":"<p>Para facilitar, aqui est\u00e1 o script completo que voc\u00ea pode copiar, colar e executar para ver a m\u00e1gica acontecer.</p> <pre><code>from pixcore import PixData\nfrom pixcore import Pix\n\ndef gerar_cobranca_pix_exemplo():\n    \"\"\"\n    Fun\u00e7\u00e3o de exemplo que encapsula todos os passos para gerar um Pix.\n    \"\"\"\n    print(\"Iniciando a gera\u00e7\u00e3o de uma cobran\u00e7a Pix...\")\n\n    try:\n        # 1. Defina e valide os dados da cobran\u00e7a\n        dados_pix = PixData(\n            recebedor_nome=\"EMPRESA MODELO LTDA\",\n            recebedor_cidade=\"CIDADE EXEMPLO\",\n            pix_key=\"123e4567-e89b-12d3-a456-426655440000\", # Chave aleat\u00f3ria (UUID)\n            valor=25.50,\n            transacao_id=\"TXID.12345\"\n        )\n        print(\"Dados validados com sucesso!\")\n\n        # 2. Crie a inst\u00e2ncia principal do gerador\n        gerador_pix = Pix(dados_pix)\n\n        # 3. Obtenha o payload (Copia e Cola) e exiba\n        payload = gerador_pix.payload()\n        print(\"\\n--- Payload (Copia e Cola) Gerado ---\")\n        print(payload)\n        print(\"------------------------------------\")\n\n        # 4. Salve o QR Code em um arquivo\n        caminho_arquivo = \"pix_exemplo.png\"\n        gerador_pix.save_qrcode(caminho_arquivo)\n\n        print(f\"\\nQR Code foi salvo com sucesso em: '{caminho_arquivo}'\")\n\n    except ValueError as e:\n        # Captura erros de valida\u00e7\u00e3o da classe PixData\n        print(f\"\\nERRO: N\u00e3o foi poss\u00edvel gerar o Pix. Motivo: {e}\")\n\nif __name__ == \"__main__\":\n    gerar_cobranca_pix_exemplo()\n</code></pre> <p>Ao executar este script, ele imprimir\u00e1 o payload no seu terminal e criar\u00e1 um arquivo de imagem pix_exemplo.png no mesmo diret\u00f3rio.</p> <p>Pronto! Agora voc\u00ea j\u00e1 sabe o b\u00e1sico para criar cobran\u00e7as Pix com a biblioteca.</p>"},{"location":"2.%20Tutorial/","title":"2. Tutorial","text":"<p>Bem-vindo ao tutorial do PixCore! No Guia de In\u00edcio R\u00e1pido, voc\u00ea aprendeu a gerar um QR Code Pix b\u00e1sico. Agora, vamos explorar funcionalidades mais avan\u00e7adas, como customiza\u00e7\u00e3o de cores, adi\u00e7\u00e3o de logos e a manipula\u00e7\u00e3o da imagem do QR Code em mem\u00f3ria.</p>"},{"location":"2.%20Tutorial/#1-gerando-um-pix-sem-valor-definido","title":"1. Gerando um Pix sem Valor Definido","text":"<p>Um caso de uso muito comum \u00e9 gerar um QR Code onde o pagador pode inserir o valor que desejar. Para fazer isso, basta omitir o par\u00e2metro <code>valor</code> ou defini-lo como <code>None</code> ao criar seu objeto <code>PixData</code>.</p> <pre><code>from pixcore import PixData\nfrom pixcore import Pix\n\n# 1. Crie os dados sem o campo \"valor\"\ndados_pix_livre = PixData(\n    recebedor_nome=\"ONG BEM MAIOR\",\n    recebedor_cidade=\"BRASILIA\",\n    pix_key=\"projetobemmaior@email.com\", # Chave do tipo e-mail\n    transacao_id=\"DOACAO123\"\n)\n\n# 2. Instancie o gerador\ngerador_pix = Pix(dados_pix_livre)\n\n# 3. Salve o QR Code\ngerador_pix.save_qrcode(\"pix_sem_valor.png\")\n\nprint(\"QR Code para doa\u00e7\u00e3o (valor livre) salvo com sucesso!\")`\n</code></pre> <p>O arquivo pix_sem_valor.png gerado permitir\u00e1 que o usu\u00e1rio defina o valor a ser pago no app do banco.</p>"},{"location":"2.%20Tutorial/#2-customizacao-visual-do-qr-code","title":"2. Customiza\u00e7\u00e3o Visual do QR Code","text":"<p>A biblioteca permite personalizar a apar\u00eancia do QR Code de duas formas principais: adicionando um logo e alterando as cores.</p>"},{"location":"2.%20Tutorial/#21-adicionando-um-logo","title":"2.1. Adicionando um Logo","text":"<p>Voc\u00ea pode embutir uma imagem (como o logo da sua marca) no centro do QR Code. Para isso, a biblioteca usa um n\u00edvel de corre\u00e7\u00e3o de erros alto, garantindo que o c\u00f3digo continue leg\u00edvel.</p> <p>Importante: O logo deve estar em um formato de imagem comum (.png, .jpg) e n\u00e3o pode ser muito grande para n\u00e3o comprometer a leitura.</p> <pre><code># Reutilizando os dados do exemplo anterior\ndados_pix_com_valor = PixData(\n    recebedor_nome=\"CAFETERIA DO JOSE\",\n    recebedor_cidade=\"RIO DE JANEIRO\",\n    pix_key=\"pagamento@cafeteriajose.com.br\",\n    valor=15.00,\n    transacao_id=\"CAFE-PEDIDO-456\"\n)\n\ngerador_pix = Pix(dados_pix_com_valor)\n\n# Use o par\u00e2metro \"caminho_logo\" para especificar a imagem\ngerador_pix.save_qrcode(\n    \"pix_com_logo.png\",\n    caminho_logo=\"caminho/para/seu/logo.png\" # Altere para o caminho real do seu logo\n)\nprint(\"QR Code com logo salvo!\")\n</code></pre>"},{"location":"2.%20Tutorial/#22-alterando-as-cores","title":"2.2. Alterando as Cores","text":"<p>\u00c9 poss\u00edvel alterar a cor de preenchimento do QR Code e a cor do fundo usando os par\u00e2metros cor_qr e cor_fundo. Voc\u00ea pode usar nomes de cores em ingl\u00eas (ex: \"navy\") ou c\u00f3digos hexadecimais (ex: \"#000080\").</p> <pre><code># Reutilizando o mesmo gerador\ngerador_pix.save_qrcode(\n    \"pix_colorido.png\",\n    cor_qr=\"navy\",       # Cor dos blocos do QR Code\n    cor_fundo=\"#EFEFEF\"  # Cor de fundo\n)\nprint(\"QR Code colorido salvo!\")\n</code></pre>"},{"location":"2.%20Tutorial/#3-manipulando-o-qr-code-em-memoria","title":"3. Manipulando o QR Code em Mem\u00f3ria","text":"<p>E se voc\u00ea n\u00e3o quiser salvar o QR Code em um arquivo? Por exemplo, para exibi-lo em uma p\u00e1gina web com Flask/Django ou inseri-lo em um PDF com reportlab.</p> <p>Para isso, use o m\u00e9todo .qrcode() em vez de .save_qrcode(). Ele retorna um objeto de imagem da biblioteca Pillow (PIL), que voc\u00ea pode manipular como quiser.</p> <pre><code>from pixcore import PixData\nfrom pixcore import Pix\n\ndados_pix = PixData(\n    recebedor_nome=\"LOJA ONLINE\",\n    recebedor_cidade=\"CURITIBA\",\n    pix_key=\"vendas@lojaonline.com\",\n    valor=99.90,\n    transacao_id=\"WEB-VENDA-789\"\n)\ngerador_pix = Pix(dados_pix)\n\n# 1. Gere a imagem do QR Code em mem\u00f3ria\nimagem_qr = gerador_pix.qrcode()\n\n# 2. Agora voc\u00ea tem um objeto de imagem. Voc\u00ea pode:\n#    - Exibi-la (bom para testes e scripts locais)\nprint(\"Exibindo imagem em uma janela...\")\nimagem_qr.show()\n</code></pre> <p>Este m\u00e9todo oferece m\u00e1xima flexibilidade para integrar o QR Code em qualquer fluxo de trabalho da sua aplica\u00e7\u00e3o.</p>"},{"location":"2.%20Tutorial/#4-tratamento-de-erros","title":"4. Tratamento de Erros","text":"<p>Como visto no in\u00edcio, a classe PixData protege sua aplica\u00e7\u00e3o de dados inv\u00e1lidos. \u00c9 uma boa pr\u00e1tica sempre envolver a cria\u00e7\u00e3o de PixData em um bloco try...except para capturar e tratar esses erros de forma elegante.</p> <pre><code>try:\n    # Tentando criar um Pix com um nome de recebedor longo demais\n    dados_errados = PixData(\n        recebedor_nome=\"UM NOME DE EMPRESA EXTREMAMENTE LONGO QUE VAI CAUSAR UM ERRO DE VALIDACAO\",\n        recebedor_cidade=\"SAO PAULO\",\n        pix_key=\"chave-valida@email.com\"\n    )\nexcept ValueError as e:\n    print(f\"Ocorreu um erro esperado: {e}\")\n</code></pre> <p>Com isso, voc\u00ea tem uma vis\u00e3o completa de como utilizar os principais recursos do PixCore. Para detalhes sobre cada par\u00e2metro e m\u00e9todo, consulte a Refer\u00eancia da API.</p>"},{"location":"3.%20Guia%20CLI/","title":"3. Guia CLI","text":"<p>Bem-vindo ao guia da CLI do PixCore! Al\u00e9m de ser uma biblioteca Python, o PixCore oferece uma poderosa ferramenta de linha de comando para gerar cobran\u00e7as Pix diretamente do seu terminal.</p> <p>A CLI \u00e9 ideal para automa\u00e7\u00e3o, scripts, testes r\u00e1pidos ou simplesmente para quando voc\u00ea precisa de um QR Code sem escrever nenhum c\u00f3digo Python.</p>"},{"location":"3.%20Guia%20CLI/#1-instalacao-e-uso-basico","title":"1. Instala\u00e7\u00e3o e Uso B\u00e1sico","text":"<p>Ao instalar a biblioteca com pip install pixcore, a ferramenta de linha de comando pixcore \u00e9 automaticamente adicionada ao seu ambiente.</p> <p>O uso mais simples \u00e9 gerar um QR Code e exibi-lo na tela. A CLI ir\u00e1 solicitar interativamente qualquer informa\u00e7\u00e3o obrigat\u00f3ria que n\u00e3o for fornecida.</p> <pre><code># A CLI pedir\u00e1 a chave, nome e cidade\npixcore qrcode --amount 10.50 \n</code></pre>"},{"location":"3.%20Guia%20CLI/#2-estrutura-dos-comandos","title":"2. Estrutura dos Comandos","text":"<p>A CLI segue uma estrutura simples e intuitiva:</p> <p><pre><code>pixcore [COMANDO] [ARGUMENTOS] [OP\u00c7\u00d5ES]\n</code></pre> - [COMANDO]: A a\u00e7\u00e3o que voc\u00ea deseja executar (ex: qrcode, payload).</p> <ul> <li> <p>[ARGUMENTOS]: Valores necess\u00e1rios para um comando (ex: o payload para o comando decode).</p> </li> <li> <p>[OP\u00c7\u00d5ES]: Par\u00e2metros para customizar a execu\u00e7\u00e3o (ex: --key, --output).</p> </li> </ul> <p>Voc\u00ea pode obter ajuda a qualquer momento com a op\u00e7\u00e3o <code>--help</code>.</p> <pre><code># Ajuda geral com a lista de comandos\npixcore --help\n\n# Ajuda espec\u00edfica para o comando qrcode\npixcore qrcode --help\n</code></pre>"},{"location":"3.%20Guia%20CLI/#3-comandos-principais","title":"3. Comandos Principais","text":""},{"location":"3.%20Guia%20CLI/#31-qrcode","title":"3.1. qrcode","text":"<p>Gera a imagem de um QR Code Pix. Este \u00e9 o comando mais comum. Por padr\u00e3o, ele abre a imagem no visualizador padr\u00e3o do seu sistema. Usando a op\u00e7\u00e3o <code>--output</code>, ele salva a imagem em um arquivo.</p> Op\u00e7\u00e3o Atalho Descri\u00e7\u00e3o <code>--key</code> <code>-k</code> Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria). <code>--name</code> <code>-n</code> Nome do benefici\u00e1rio. <code>--city</code> <code>-c</code> Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos). <code>--amount</code> <code>-a</code> Valor da transa\u00e7\u00e3o. Ex: 10.50. <code>--output</code> <code>-o</code> Caminho e nome do arquivo de sa\u00edda (ex: 'output/pix.png'). <code>--logo</code> <code>-l</code> Caminho para um arquivo de imagem (ex: pasta/logo.png). <code>--txid</code> <code>-t</code> ID da transa\u00e7\u00e3o (Transaction ID). <code>--info</code> <code>-i</code> Informa\u00e7\u00f5es adicionais para o pagador. <code>--cep</code> CEP do benefici\u00e1rio (formato XXXXXXXX). <code>--mcc</code> Merchant Category Code (C\u00f3digo da Categoria do Comerciante). <code>--initiation-method</code> M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico). <code>--lang</code> Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US). <code>--alt-name</code> Nome alternativo do benefici\u00e1rio (em outro idioma). <code>--alt-city</code> Cidade alternativa do benefici\u00e1rio (em outro idioma). <p>Exemplos: <pre><code># Gerar QR Code de R$ 25,00 e exibir na tela\npixcore qrcode -k \"chave-aleatoria-aqui\" -n \"NOME DO RECEBEDOR\" -c \"SAO PAULO\" -a 25.00\n\n# Gerar QR Code de R$ 99,90 com logo e salvar em um arquivo\npixcore qrcode -k \"vendas@minhaloja.com\" -n \"MINHA LOJA\" -c \"CURITIBA\" -a 99.90 --logo \"logo.png\" -o \"cobran\u00e7a.png\"\n</code></pre></p>"},{"location":"3.%20Guia%20CLI/#32-payload","title":"3.2. payload","text":"<p>Gera a string \"Pix Copia e Cola\" (BR Code). Este comando exibe no terminal o payload completo, que pode ser usado em qualquer app de banco. Ele aceita as mesmas op\u00e7\u00f5es de dados do comando qrcode (chave, nome, valor, etc.), exceto as de customiza\u00e7\u00e3o visual.</p> Op\u00e7\u00e3o Atalho Descri\u00e7\u00e3o <code>--key</code> <code>-k</code> Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria). <code>--name</code> <code>-n</code> Nome do benefici\u00e1rio. <code>--city</code> <code>-c</code> Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos). <code>--amount</code> <code>-a</code> Valor da transa\u00e7\u00e3o. Ex: 10.50. <code>--txid</code> <code>-t</code> ID da transa\u00e7\u00e3o (Transaction ID). <code>--info</code> <code>-i</code> Informa\u00e7\u00f5es adicionais para o pagador. <code>--cep</code> CEP do benefici\u00e1rio (formato XXXXXXXX). <code>--mcc</code> Merchant Category Code (C\u00f3digo da Categoria do Comerciante). <code>--initiation-method</code> M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico). <code>--lang</code> Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US). <code>--alt-name</code> Nome alternativo do benefici\u00e1rio (em outro idioma). <code>--alt-city</code> Cidade alternativa do benefici\u00e1rio (em outro idioma). <p>Exemplo: <pre><code># Gerar um payload para uma doa\u00e7\u00e3o de valor livre\npixcore payload -k \"doacoes@causa.org\" -n \"ONG CAUSA NOBRE\" -c \"BRASILIA\" --txid \"DOACAO-ABERTA\"\n</code></pre></p>"},{"location":"3.%20Guia%20CLI/#33-decode","title":"3.3. decode","text":"<p>Decodifica um payload \"Copia e Cola\" e exibe seus dados. \u00datil para verificar o conte\u00fado de um c\u00f3digo Pix antes de pagar ou para depura\u00e7\u00e3o.</p> Argumento Descri\u00e7\u00e3o <code>payload</code> A string do payload BR Code a ser decodificada. <p>Exemplo: <pre><code># Cole o payload completo como argumento\npixcore decode \"00020126580014br.gov.bcb.pix0136...\"\n</code></pre></p>"},{"location":"3.%20Guia%20CLI/#34-lote","title":"3.4. lote","text":"<p>Gera m\u00faltiplos QR Codes a partir de um arquivo CSV. Ideal para cobran\u00e7as em massa. Voc\u00ea precisa fornecer um arquivo de entrada (.csv) e um diret\u00f3rio de sa\u00edda. O arquivo CSV deve conter as colunas valor e txid. Outras colunas como chave, nome e cidade podem ser usadas para sobrescrever os valores padr\u00e3o.</p> <p>Argumentos:</p> Argumento Descri\u00e7\u00e3o <code>arquivo_csv</code> Caminho para o arquivo CSV com os dados. <code>diretorio_saida</code> Diret\u00f3rio onde os QR Codes ser\u00e3o salvos. <p>Op\u00e7\u00f5es:</p> Op\u00e7\u00e3o Atalho Descri\u00e7\u00e3o <code>--key</code> <code>-k</code> Chave PIX padr\u00e3o (usada se n\u00e3o especificada no CSV). <code>--name</code> <code>-n</code> Nome do benefici\u00e1rio padr\u00e3o (usado se n\u00e3o especificado no CSV). <code>--city</code> <code>-c</code> Cidade padr\u00e3o do benefici\u00e1rio (usada se n\u00e3o especificada no CSV). <p>Exemplo: <pre><code># Processar o arquivo 'cobrancas.csv' e salvar os QR Codes na pasta 'saida/'\npixcore lote cobrancas.csv saida/ --name \"MINHA EMPRESA\" -k \"meu-cnpj-aqui\" -c \"SAO PAULO\"\n</code></pre></p>"},{"location":"3.%20Guia%20CLI/#35-config","title":"3.5. config","text":"<p>Gerencia configura\u00e7\u00f5es padr\u00e3o para evitar repeti\u00e7\u00e3o.</p> <ul> <li><code>config set [CHAVE] [VALOR]</code>: Salva um valor padr\u00e3o (chaves v\u00e1lidas: key, name, city).</li> <li><code>config show</code>: Mostra as configura\u00e7\u00f5es salvas.</li> </ul> Argumento Descri\u00e7\u00e3o <code>key</code> A chave de configura\u00e7\u00e3o (ex: <code>name</code>, <code>city</code>, <code>key</code>). <code>value</code> O valor a ser salvo. <p>Exemplo: <pre><code># Salve seu nome e chave PIX para n\u00e3o precisar digit\u00e1-los sempre\npixcore config set name \"MEU NOME COMPLETO\"\npixcore config set key \"meu-email@exemplo.com\"\n\n# Agora voc\u00ea pode gerar um QR Code de forma mais simples\npixcore qrcode --city \"SAO PAULO\" --amount 50\n</code></pre></p>"},{"location":"4.%20Contribui%C3%A7%C3%A3o/","title":"4. Como Contribuir","text":"<p>Ficamos muito felizes com seu interesse em contribuir com o PixCore! Toda contribui\u00e7\u00e3o, n\u00e3o importa o tamanho, \u00e9 bem-vinda e valorizada.</p> <p>Este guia fornecer\u00e1 tudo que voc\u00ea precisa para come\u00e7ar a colaborar com o projeto, seja reportando um bug, sugerindo uma nova funcionalidade ou escrevendo c\u00f3digo.</p>"},{"location":"4.%20Contribui%C3%A7%C3%A3o/#tipos-de-contribuicao","title":"Tipos de Contribui\u00e7\u00e3o","text":"<p>Existem muitas maneiras de contribuir, e todas s\u00e3o importantes:</p> <ul> <li>\ud83d\udc1e Reportando Bugs: Se voc\u00ea encontrou um comportamento inesperado ou um erro, abra uma Issue detalhando o problema.</li> <li>\ud83d\udca1 Sugerindo Melhorias ou Novas Funcionalidades: Tem uma ideia para tornar o PixCore ainda melhor? Adorar\u00edamos ouvi-la! Crie uma Issue para descrever sua sugest\u00e3o.</li> <li>\ud83d\udcd6 Melhorando a Documenta\u00e7\u00e3o: Se voc\u00ea encontrou um erro de digita\u00e7\u00e3o, uma explica\u00e7\u00e3o confusa ou acredita que uma se\u00e7\u00e3o pode ser melhorada, sinta-se \u00e0 vontade para propor altera\u00e7\u00f5es.</li> <li>\ud83d\udcbb Escrevendo C\u00f3digo: Voc\u00ea pode corrigir um bug existente ou implementar uma nova funcionalidade.</li> </ul>"},{"location":"4.%20Contribui%C3%A7%C3%A3o/#configurando-o-ambiente-de-desenvolvimento","title":"Configurando o Ambiente de Desenvolvimento","text":"<p>Para garantir que voc\u00ea tenha um ambiente de desenvolvimento limpo e consistente, o projeto utiliza Poetry para gerenciar depend\u00eancias e ambientes virtuais.</p> <p>Siga os passos abaixo para configurar seu ambiente local:</p> <ol> <li> <p>Fa\u00e7a um Fork do Reposit\u00f3rio     Clique no bot\u00e3o \"Fork\" no canto superior direito da p\u00e1gina do reposit\u00f3rio no GitHub.</p> </li> <li> <p>Clone o seu Fork     Em seu terminal, clone o reposit\u00f3rio que voc\u00ea acabou de \"forkar\":     <pre><code>git clone [https://github.com/gustjose/pixcore.git](https://github.com/gustjose/pixcore.git)\ncd pixcore\n</code></pre></p> </li> <li> <p>Instale as Depend\u00eancias com Poetry     Se voc\u00ea ainda n\u00e3o tem o Poetry, siga as instru\u00e7\u00f5es de instala\u00e7\u00e3o. Com o Poetry instalado, execute o comando abaixo para instalar todas as depend\u00eancias do projeto, incluindo as de desenvolvimento (<code>pytest</code>, <code>black</code>, etc.):     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Ative o Ambiente Virtual     Para ativar o ambiente virtual gerenciado pelo Poetry, utilize o comando:     <pre><code>poetry shell\n</code></pre>     Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a codificar!</p> </li> </ol>"},{"location":"4.%20Contribui%C3%A7%C3%A3o/#fluxo-de-trabalho-para-contribuicao-de-codigo","title":"Fluxo de Trabalho para Contribui\u00e7\u00e3o de C\u00f3digo","text":"<ol> <li>Crie uma Nova Branch     Sempre trabalhe em uma nova branch para manter o hist\u00f3rico organizado. Escolha um nome descritivo para ela.</li> </ol> <pre><code># Exemplo para uma nova funcionalidade\ngit checkout -b feature/adiciona-suporte-a-campo-x\n\n# Exemplo para uma corre\u00e7\u00e3o de bug\ngit checkout -b fix/corrige-calculo-crc16\n</code></pre> <ol> <li> <p>Escreva seu C\u00f3digo     Fa\u00e7a as altera\u00e7\u00f5es ou adi\u00e7\u00f5es necess\u00e1rias no c\u00f3digo. Lembre-se de seguir o estilo e a arquitetura existentes.</p> </li> <li> <p>Garanta a Qualidade do C\u00f3digo     Antes de submeter sua contribui\u00e7\u00e3o, rode as ferramentas de qualidade para formatar e verificar seu c\u00f3digo.</p> </li> </ol> <pre><code>task lint\n</code></pre> <ol> <li>Execute os Testes     \u00c9 fundamental que todos os testes passem antes de voc\u00ea criar um Pull Request. Adicione novos testes se voc\u00ea estiver implementando uma nova funcionalidade.</li> </ol> <pre><code>task test\n</code></pre> <ol> <li>Envie seu Pull Request (PR)     Ap\u00f3s fazer o commit das suas altera\u00e7\u00f5es, envie-as para o seu fork e abra um Pull Request para a branch <code>main</code> do reposit\u00f3rio original. <pre><code>git push origin nome-da-sua-branch\n</code></pre> Ao abrir o PR, forne\u00e7a um t\u00edtulo claro e uma descri\u00e7\u00e3o detalhada do que foi feito. Se sua altera\u00e7\u00e3o resolve uma Issue existente, mencione-a na descri\u00e7\u00e3o (ex: <code>Resolve #123</code>).</li> </ol>"},{"location":"4.%20Contribui%C3%A7%C3%A3o/#codigo-de-conduta","title":"C\u00f3digo de Conduta","text":"<p>Embora ainda n\u00e3o tenhamos um arquivo formal de C\u00f3digo de Conduta, pedimos que todas as intera\u00e7\u00f5es neste projeto (issues, pull requests, etc.) sejam feitas de forma respeitosa, construtiva e amig\u00e1vel.</p> <p>Obrigado por dedicar seu tempo e talento ao PixCore!</p>"},{"location":"5.%20Sobre/","title":"5. Sobre","text":"<p>Esta p\u00e1gina conta um pouco da hist\u00f3ria e da filosofia por tr\u00e1s do projeto PixCore, al\u00e9m de informa\u00e7\u00f5es sobre a licen\u00e7a de uso e como entrar em contato.</p>"},{"location":"5.%20Sobre/#a-motivacao-por-tras-do-projeto","title":"A Motiva\u00e7\u00e3o por Tr\u00e1s do Projeto","text":"<p>A gera\u00e7\u00e3o de cobran\u00e7as via Pix, embora padronizada pelo Banco Central, muitas vezes envolve a manipula\u00e7\u00e3o de strings complexas, c\u00e1lculos de checksum (CRC16) e a montagem de um payload que pode ser propenso a erros.</p> <p>O PixCore nasceu da necessidade de uma ferramenta para desenvolvedores Python que fosse, ao mesmo tempo, poderosa e incrivelmente simples de usar. O objetivo era abstrair toda a complexidade do padr\u00e3o BR Code, oferecendo uma API limpa, direta e bem documentada.</p> <p>Quer\u00edamos criar uma biblioteca que: - Permitisse a um desenvolvedor j\u00fanior gerar um QR Code em menos de 5 minutos. - Oferecesse flexibilidade para customiza\u00e7\u00f5es visuais (cores e logo). - Fosse robusta, validando os dados de entrada para prevenir erros antes que eles aconte\u00e7am. - Tivesse depend\u00eancias m\u00ednimas e fosse f\u00e1cil de instalar em qualquer ambiente.</p>"},{"location":"5.%20Sobre/#nossa-filosofia","title":"Nossa Filosofia","text":"<p>O desenvolvimento do PixCore \u00e9 guiado por alguns princ\u00edpios fundamentais:</p> <ul> <li>Simplicidade Acima de Tudo: A interface deve ser intuitiva. Menos \u00e9 mais.</li> <li>Valida\u00e7\u00e3o Proativa: \u00c9 melhor falhar cedo com uma mensagem de erro clara do que gerar um QR Code inv\u00e1lido silenciosamente. A classe <code>PixData</code> \u00e9 o cora\u00e7\u00e3o dessa filosofia.</li> <li>Documenta\u00e7\u00e3o \u00e9 Essencial: Um c\u00f3digo bem documentado \u00e9 um c\u00f3digo que respeita o tempo de quem o utiliza. A documenta\u00e7\u00e3o deve ser um guia completo e pr\u00e1tico.</li> <li>Flexibilidade para o Desenvolvedor: Oferecer tanto um m\u00e9todo r\u00e1pido para salvar arquivos (<code>.save_qrcode()</code>) quanto um m\u00e9todo para manipula\u00e7\u00e3o em mem\u00f3ria (<code>.qrcode()</code>) d\u00e1 ao usu\u00e1rio o poder de escolher a melhor abordagem para seu caso de uso.</li> </ul>"},{"location":"5.%20Sobre/#sobre-o-autor","title":"Sobre o Autor","text":"<p>O PixCore \u00e9 um projeto de c\u00f3digo aberto criado e mantido por Gustavo Jos\u00e9. Voc\u00ea pode me encontrar e acompanhar outros projetos atrav\u00e9s dos meus perfis:</p> <ul> <li>GitHub: gustjose</li> </ul>"},{"location":"5.%20Sobre/#licenca","title":"Licen\u00e7a","text":"<p>O PixCore \u00e9 um software de c\u00f3digo aberto distribu\u00eddo sob a Licen\u00e7a MIT.</p> <p>Isso significa que voc\u00ea tem total liberdade para usar, copiar, modificar, mesclar, publicar, distribuir, sublicenciar e/ou vender c\u00f3pias do software, desde que o aviso de copyright e a declara\u00e7\u00e3o de permiss\u00e3o sejam inclu\u00eddos em todas as c\u00f3pias ou partes substanciais do software.</p> <p>Para ler o texto completo da licen\u00e7a, clique aqui.</p>"},{"location":"5.%20Sobre/#contato","title":"Contato","text":"<ul> <li>Bugs e Sugest\u00f5es: A melhor forma de entrar em contato para relatar bugs ou sugerir novas funcionalidades \u00e9 atrav\u00e9s das Issues do GitHub.</li> <li>Outros Assuntos: Para outras quest\u00f5es, sinta-se \u00e0 vontade para me contatar atrav\u00e9s dos links de perfil acima.</li> </ul>"},{"location":"changelog/","title":"Hist\u00f3rico de Vers\u00f5es","text":""},{"location":"changelog/#100","title":"1.0.0","text":"<p>Vers\u00e3o publicada em 24/08/2025 </p>"},{"location":"changelog/#o-que-ha-de-novo","title":"O que h\u00e1 de novo?","text":"<p>- CLI: Agora a biblioteca PixCore possue uma interface CLI para ser utilizada diretamente pelo terminal.\r - Tratamento de Erros: Classes personalizadas para tratamento de erros e substitui\u00e7\u00e3o do \"print\" pelo \"raise\" para melhor adequa\u00e7\u00e3o do projeto.\r - Documenta\u00e7\u00e3o atualizada: documenta\u00e7\u00e3o ajustada e aprimorada para a \u00faltima vers\u00e3o.\r \r</p>"},{"location":"changelog/#correcoes","title":"Corre\u00e7\u00f5es:","text":"<p>- Modifica\u00e7\u00e3o das excess\u00f5es.\r</p>"},{"location":"changelog/#012","title":"0.1.2","text":"<p>Vers\u00e3o publicada em 16/08/2025 </p>"},{"location":"changelog/#o-que-ha-de-novo_1","title":"O que h\u00e1 de novo?","text":"<ul> <li>Novo sistema de valida\u00e7\u00e3o: chave pix agora conta com valida\u00e7\u00e3o individual para cada tipo chave (CPF, CNPJ, e-mail, telefone e chave aleat\u00f3ria).\r</li> <li>Documenta\u00e7\u00e3o atualizada: documenta\u00e7\u00e3o foi revisada e atualizada.\r \r</li> </ul>"},{"location":"changelog/#correcoes_1","title":"Corre\u00e7\u00f5es:","text":"<ul> <li>Valida\u00e7\u00e3o: altera\u00e7\u00f5es de valida\u00e7\u00e3o da 'dataclass'.</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<p>Vers\u00e3o publicada em 08/08/2025 </p>"},{"location":"changelog/#o-que-ha-de-novo_2","title":"O que h\u00e1 de novo?","text":"<ul> <li>Documenta\u00e7\u00e3o atualizada: documenta\u00e7\u00e3o foi revisada para tornar a integra\u00e7\u00e3o com seu projeto ainda mais simples.\r \r</li> </ul>"},{"location":"changelog/#correcoes_2","title":"Corre\u00e7\u00f5es:","text":"<ul> <li>Valida\u00e7\u00e3o: altera\u00e7\u00f5es de valida\u00e7\u00e3o da 'dataclass'.\r \r</li> </ul>"},{"location":"changelog/#contribuicoes","title":"Contribui\u00e7\u00f5es:","text":"<ul> <li>Corre\u00e7\u00e3o de Valida\u00e7\u00e3o por @AndersonCostaDev01 in https://github.com/gustjose/pixcore/pull/2</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>Vers\u00e3o publicada em 27/07/2025 Full Changelog: https://github.com/gustjose/pixcore/commits/0.1.0</p>"},{"location":"api/CLI/","title":"CLI","text":""},{"location":"api/CLI/#pixcore.cli.config_set","title":"<code>config_set(key=typer.Argument(..., help='A chave de configura\u00e7\u00e3o (ex: name, city, key).'), value=typer.Argument(..., help='O valor a ser salvo.'))</code>","text":"<p>Define e salva um par chave/valor na configura\u00e7\u00e3o padr\u00e3o da aplica\u00e7\u00e3o.</p> <p>Use este comando para salvar valores que voc\u00ea usa com frequ\u00eancia, como seu nome, cidade ou chave PIX principal. Uma vez salvas, essas configura\u00e7\u00f5es ser\u00e3o usadas como padr\u00e3o em outros comandos, evitando que voc\u00ea precise digit\u00e1-las toda vez.</p> <p>As chaves de configura\u00e7\u00e3o v\u00e1lidas s\u00e3o: 'name', 'city' e 'key'.</p> <p>Exemplos de uso:</p> <ul> <li> <p>Salvar seu nome padr\u00e3o:     $ pixcore config set name \"Meu Nome Completo\"</p> </li> <li> <p>Salvar sua chave PIX principal:     $ pixcore config set key \"minha-chave-aleatoria\"</p> </li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@config_app.command(\"set\", help=\"Define um valor de configura\u00e7\u00e3o. Ex: 'pixcore config set name \\\"Meu Nome\\\"'\")\ndef config_set(\n    key: str = typer.Argument(..., help=\"A chave de configura\u00e7\u00e3o (ex: name, city, key).\"),\n    value: str = typer.Argument(..., help=\"O valor a ser salvo.\"),\n):\n    \"\"\"\n    Define e salva um par chave/valor na configura\u00e7\u00e3o padr\u00e3o da aplica\u00e7\u00e3o.\n\n    Use este comando para salvar valores que voc\u00ea usa com frequ\u00eancia, como seu nome,\n    cidade ou chave PIX principal. Uma vez salvas, essas configura\u00e7\u00f5es ser\u00e3o usadas\n    como padr\u00e3o em outros comandos, evitando que voc\u00ea precise digit\u00e1-las toda vez.\n\n    As chaves de configura\u00e7\u00e3o v\u00e1lidas s\u00e3o: 'name', 'city' e 'key'.\n\n    Exemplos de uso:\n\n    - Salvar seu nome padr\u00e3o:\n        $ pixcore config set name \"Meu Nome Completo\"\n\n    - Salvar sua chave PIX principal:\n        $ pixcore config set key \"minha-chave-aleatoria\"\n    \"\"\"\n    chaves_validas = [\"name\", \"city\", \"key\"]\n    if key not in chaves_validas:\n        console.print(Panel(f\"\u274c Chave '[bold red]{key}[/]' inv\u00e1lida. Use uma das seguintes: {chaves_validas}\", expand=False))\n        raise typer.Exit(code=1)\n\n    config_manager.set_value('default', key, value)\n    console.print(Panel(f\"\u2705 Configura\u00e7\u00e3o '[cyan]{key}[/]' salva como '[green]{value}[/]'.\", expand=False))\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.config_show","title":"<code>config_show()</code>","text":"<p>Exibe as configura\u00e7\u00f5es atuais salvas em uma tabela.</p> <p>Este comando l\u00ea o arquivo de configura\u00e7\u00e3o e mostra os valores padr\u00e3o que est\u00e3o sendo utilizados pela aplica\u00e7\u00e3o. \u00c9 \u00fatil para verificar quais dados est\u00e3o configurados antes de gerar novos c\u00f3digos PIX.</p> <p>Exemplo de uso:</p> <ul> <li>Ver as configura\u00e7\u00f5es salvas:     $ pixcore config show</li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@config_app.command(\"show\", help=\"Mostra todas as configura\u00e7\u00f5es salvas.\")\ndef config_show():\n    \"\"\"\n    Exibe as configura\u00e7\u00f5es atuais salvas em uma tabela.\n\n    Este comando l\u00ea o arquivo de configura\u00e7\u00e3o e mostra os valores padr\u00e3o que est\u00e3o\n    sendo utilizados pela aplica\u00e7\u00e3o. \u00c9 \u00fatil para verificar quais dados est\u00e3o\n    configurados antes de gerar novos c\u00f3digos PIX.\n\n    Exemplo de uso:\n\n    - Ver as configura\u00e7\u00f5es salvas:\n        $ pixcore config show\n    \"\"\"\n    configs = config_manager.get_config_as_dict()\n    if not configs or 'default' not in configs:\n        console.print(\"[yellow]Nenhuma configura\u00e7\u00e3o salva encontrada.[/yellow]\")\n        return\n\n    table = Table(title=\"Configura\u00e7\u00f5es Salvas\")\n    table.add_column(\"Chave\", style=\"cyan\")\n    table.add_column(\"Valor\", style=\"green\")\n\n    for key, value in configs['default'].items():\n        table.add_row(key, value)\n\n    console.print(table)\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.decode","title":"<code>decode(payload=typer.Argument(..., help='A string do payload BR Code a ser decodificada.'))</code>","text":"<p>Decodifica um payload PIX ('Copia e Cola') e exibe seus dados de forma leg\u00edvel.</p> <p>Este comando \u00e9 \u00fatil para verificar a integridade e o conte\u00fado de um c\u00f3digo PIX. Ele recebe a string do payload, valida seu c\u00f3digo de verifica\u00e7\u00e3o (CRC16) e, se v\u00e1lido, extrai e exibe todas as informa\u00e7\u00f5es em uma tabela organizada, como nome do recebedor, valor, chave e cidade.</p> <p>Exemplo de uso:</p> <ul> <li>Decodificar um payload recebido:     $ pixcore decode \"00020126580014br.gov.bcb.pix0136...\"</li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@app.command(\n    help=\"Decodifica uma string PIX 'Copia e Cola' e exibe seus dados.\"\n)\ndef decode(\n    payload: str = typer.Argument(..., help=\"A string do payload BR Code a ser decodificada.\")\n):\n    \"\"\"\n    Decodifica um payload PIX ('Copia e Cola') e exibe seus dados de forma leg\u00edvel.\n\n    Este comando \u00e9 \u00fatil para verificar a integridade e o conte\u00fado de um c\u00f3digo PIX.\n    Ele recebe a string do payload, valida seu c\u00f3digo de verifica\u00e7\u00e3o (CRC16) e, se\n    v\u00e1lido, extrai e exibe todas as informa\u00e7\u00f5es em uma tabela organizada, como nome\n    do recebedor, valor, chave e cidade.\n\n    Exemplo de uso:\n\n    - Decodificar um payload recebido:\n        $ pixcore decode \"00020126580014br.gov.bcb.pix0136...\"\n    \"\"\"\n    try:\n        dados_decodificados = decipher.decode(payload)\n\n        tabela_resultados = Table(title=\"Dados do PIX\", show_header=False)\n        tabela_resultados.add_column(\"Campo\", style=\"cyan\", no_wrap=True)\n        tabela_resultados.add_column(\"Valor\", style=\"green\")\n\n        mapa_nomes = {\n            \"merchant_name\": \"Nome do Recebedor\",\n            \"merchant_city\": \"Cidade do Recebedor\",\n            \"pix_key\": \"Chave PIX\",\n            \"transaction_amount\": \"Valor\",\n            \"transaction_id\": \"ID da Transa\u00e7\u00e3o (TXID)\",\n            \"merchant_category_code\": \"C\u00f3d. Categoria (MCC)\",\n            \"postal_code\": \"CEP\",\n            \"country_code\": \"Pa\u00eds\",\n            \"gui\": \"GUI\",\n        }\n\n        for chave, nome_amigavel in mapa_nomes.items():\n            if chave in dados_decodificados:\n                valor = dados_decodificados[chave]\n\n                if chave == \"transaction_amount\":\n                    valor_str = f\"R$ {valor:.2f}\"\n                else:\n                    valor_str = str(valor)\n\n                tabela_resultados.add_row(nome_amigavel, valor_str)\n\n        console.print(tabela_resultados)\n\n    except exceptions.CRCInvalidoError as e:\n        console.print(panel(\"\u274c CRC Inv\u00e1lido\", f\"{e}\\nO c\u00f3digo pode estar corrompido ou foi alterado.\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.DecodificacaoPayloadError as e:\n        console.print(panel(\"\u274c Erro de Decodifica\u00e7\u00e3o\", f\"{e}\\nA string fornecida n\u00e3o parece ser um PIX Copia e Cola v\u00e1lido.\"))\n        raise typer.Exit(code=1)\n\n    except Exception as e:\n        console.print(panel(\"\u274c Ocorreu um erro inesperado\", f\"{e}\"))\n        raise typer.Exit(code=1)\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.help_callback","title":"<code>help_callback(value)</code>","text":"<p>Exibe a tela de ajuda customizada e encerra.</p> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>def help_callback(value: bool):\n    \"\"\"Exibe a tela de ajuda customizada e encerra.\"\"\"\n    if not value:\n        return\n\n    table_comandos = Table(\n        show_header=False, \n        header_style=\"bold magenta\",\n        padding=(0, 1),\n        box=None\n    )\n\n    table_comandos.add_column(\"Comando / Op\u00e7\u00e3o\", style=\"cyan\", no_wrap=True, width=10)\n    table_comandos.add_column(\"Descri\u00e7\u00e3o\", width=75)\n\n    # Se\u00e7\u00e3o de Comandos\n    table_comandos.add_section()\n    table_comandos.add_row(\n        \"payload\",\n        \"Gera e exibe um [b]payload PIX[/] no formato TLV (Copia e Cola).\"\n    )\n    table_comandos.add_row(\n        \"qrcode\", \n        \"Gera um [b]QR Code PIX[/] e o exibe no terminal ou salva em um arquivo.\"\n    )\n    table_comandos.add_row(\n        \"decode\", \n        \"Decodifica uma string PIX 'Copia e Cola' e exibe seus dados.\"\n    )\n    table_comandos.add_row(\n        \"lote\", \n        \"Gera m\u00faltiplos QR Codes PIX a partir de um arquivo CSV.\"\n    )\n    table_comandos.add_row(\n        \"config\", \n        \"Gerencia as configura\u00e7\u00f5es padr\u00e3o da aplica\u00e7\u00e3o.\"\n    )\n\n    table_global = Table(\n        show_header=False, \n        header_style=\"bold magenta\",\n        padding=(0, 1),\n        box=None\n    )\n\n    table_global.add_column(\"Comando / Op\u00e7\u00e3o\", style=\"cyan\", no_wrap=True, width=10)\n    table_global.add_column(\"Atalhos\", style=\"green\", width=15)\n    table_global.add_column(\"Descri\u00e7\u00e3o\", width=60)\n\n    table_global.add_section()\n    table_global.add_row(\n        \"--version\", \n        \"-v, --versao\", \n        \"Mostra a vers\u00e3o instalada do PixCore CLI.\"\n    )\n    table_global.add_row(\n        \"--help\", \n        \"-h\", \n        \"Mostra esta mensagem de ajuda detalhada.\"\n    )\n\n    f = pyfiglet.Figlet(\n        font='starwars'\n    )\n    console.print(\n        f.renderText('PixCore'),\n        style=\"bold blue\",\n    )\n\n    console.print(\"Uma ferramenta de linha de comando para gerar PIX de forma r\u00e1pida e f\u00e1cil.\")\n    console.print(\"Para mais informa\u00e7\u00f5es, acesse: https://github.com/gustjose/pixcore\\n\")\n\n    console.print(\n        Panel(\n            table_comandos,\n            title=\"Comandos\",\n            expand=False,\n            title_align='left',\n        )\n    )\n\n    console.print(\n        Panel(\n            table_global,\n            title=\"Op\u00e7\u00f5es Globais\",\n            expand=False,\n            title_align='left',\n        ))\n\n    console.print(\"Para ajuda sobre um comando espec\u00edfico, use: [b][yellow]pixcore [NOME_DO_COMANDO] --help[/]\\n\")\n    raise typer.Exit()\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.lote","title":"<code>lote(arquivo_csv=typer.Argument(..., help='Caminho para o arquivo CSV com os dados.'), diretorio_saida=typer.Argument(..., help='Diret\u00f3rio onde os QR Codes ser\u00e3o salvos.'), key=typer.Option(None, '--key', '-k', help='Chave PIX padr\u00e3o (usada se n\u00e3o especificada no CSV).'), name=typer.Option(None, '--name', '-n', help='Nome do benefici\u00e1rio padr\u00e3o (usado se n\u00e3o especificado no CSV).'), city=typer.Option(None, '--city', '-c', help='Cidade padr\u00e3o do benefici\u00e1rio (usada se n\u00e3o especificada no CSV).'))</code>","text":"<p>Processa um arquivo CSV para gerar m\u00faltiplos QR Codes PIX de uma s\u00f3 vez.</p> <p>Este comando \u00e9 ideal para casos de uso que exigem a gera\u00e7\u00e3o de cobran\u00e7as em massa. Ele l\u00ea um arquivo CSV, onde cada linha representa um PIX a ser gerado, e salva os QR Codes resultantes em um diret\u00f3rio de sa\u00edda.</p> <p>O arquivo CSV deve conter, no m\u00ednimo, as colunas: <code>valor</code> e <code>txid</code>. Outras colunas como <code>chave</code>, <code>nome</code>, <code>cidade</code>, <code>info_adicional</code>, <code>cep</code> e <code>mcc</code> podem ser inclu\u00eddas para sobrescrever os valores padr\u00e3o. Se <code>chave</code>, <code>nome</code> ou <code>cidade</code> n\u00e3o estiverem no CSV, ser\u00e3o usados os valores passados como op\u00e7\u00e3o ou do arquivo de configura\u00e7\u00e3o.</p> <p>Os arquivos de imagem gerados ser\u00e3o nomeados com o valor da coluna 'txid' de cada linha (ex: <code>[txid].png</code>).</p> <p>Exemplo de uso:</p> <ul> <li>Gerar QR Codes a partir de 'cobrancas.csv' e salvar na pasta 'qrcodes/':     $ pixcore lote \"cobrancas.csv\" \"qrcodes/\" --name \"Minha Empresa\" --city \"RIO DE JANEIRO\" --key \"meu-cnpj\"</li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@app.command(\n    help=\"Gera m\u00faltiplos QR Codes PIX a partir de um arquivo CSV.\"\n)\ndef lote(\n    arquivo_csv: str = typer.Argument(..., help=\"Caminho para o arquivo CSV com os dados.\"),\n    diretorio_saida: str = typer.Argument(..., help=\"Diret\u00f3rio onde os QR Codes ser\u00e3o salvos.\"),\n    key: str = typer.Option(None, \"--key\", \"-k\", help=\"Chave PIX padr\u00e3o (usada se n\u00e3o especificada no CSV).\"),\n    name: str = typer.Option(None, \"--name\", \"-n\", help=\"Nome do benefici\u00e1rio padr\u00e3o (usado se n\u00e3o especificado no CSV).\"),\n    city: str = typer.Option(None, \"--city\", \"-c\", help=\"Cidade padr\u00e3o do benefici\u00e1rio (usada se n\u00e3o especificada no CSV).\"),\n):\n    \"\"\"\n    Processa um arquivo CSV para gerar m\u00faltiplos QR Codes PIX de uma s\u00f3 vez.\n\n    Este comando \u00e9 ideal para casos de uso que exigem a gera\u00e7\u00e3o de cobran\u00e7as em massa.\n    Ele l\u00ea um arquivo CSV, onde cada linha representa um PIX a ser gerado, e salva\n    os QR Codes resultantes em um diret\u00f3rio de sa\u00edda.\n\n    O arquivo CSV deve conter, no m\u00ednimo, as colunas: `valor` e `txid`.\n    Outras colunas como `chave`, `nome`, `cidade`, `info_adicional`, `cep` e `mcc`\n    podem ser inclu\u00eddas para sobrescrever os valores padr\u00e3o. Se `chave`, `nome` ou `cidade`\n    n\u00e3o estiverem no CSV, ser\u00e3o usados os valores passados como op\u00e7\u00e3o ou do arquivo de configura\u00e7\u00e3o.\n\n    Os arquivos de imagem gerados ser\u00e3o nomeados com o valor da coluna 'txid' de cada linha\n    (ex: `[txid].png`).\n\n    Exemplo de uso:\n\n    - Gerar QR Codes a partir de 'cobrancas.csv' e salvar na pasta 'qrcodes/':\n        $ pixcore lote \"cobrancas.csv\" \"qrcodes/\" --name \"Minha Empresa\" --city \"RIO DE JANEIRO\" --key \"meu-cnpj\"\n    \"\"\"\n    try:\n        config = config_manager.read_config()\n        os.makedirs(diretorio_saida, exist_ok=True)\n\n        with open(arquivo_csv, mode='r', encoding='utf-8') as csvfile:\n            reader = csv.DictReader(csvfile)\n\n            console.rule(f'Gera\u00e7\u00e3o em Lote - [cyan]{arquivo_csv}', style='blue')\n            console.print('')\n\n            for i, row in enumerate(reader):\n                linha_num = i + 2\n                try:\n                    final_key = row.get('chave') or key or config.get('default', 'key', fallback=None)\n                    final_name = row.get('nome') or name or config.get('default', 'name', fallback=None)\n                    final_city = row.get('cidade') or city or config.get('default', 'city', fallback=None)\n\n                    amount_str = row.get('valor')\n                    txid = row.get('txid')\n\n                    if not all([final_key, final_name, final_city, amount_str, txid]):\n                        console.print(panel(f\"\u26a0\ufe0f Linha {linha_num} Ignorada\", \"Dados essenciais (chave, nome, cidade, valor, txid) est\u00e3o faltando.\"))\n                        continue\n\n                    try:\n                        amount = float(amount_str.replace(',', '.'))\n                    except (ValueError, TypeError):\n                        console.print(panel(f\"\u26a0\ufe0f Linha {linha_num} Ignorada\", f\"Valor '[bold]{amount_str}[/]' \u00e9 inv\u00e1lido.\"))\n                        continue\n\n                    info = row.get('info_adicional')\n                    cep = row.get('cep')\n                    mcc = row.get('mcc', '0000')\n\n                    data = models.PixData(\n                        recebedor_nome=final_name,\n                        recebedor_cidade=final_city,\n                        pix_key=final_key,\n                        valor=amount,\n                        transacao_id=txid,\n                        receptor_categoria_code=mcc,\n                        recebedor_cep=cep,\n                        info_adicional=info,\n                    )\n\n                    transacao = brcode.Pix(data)\n                    nome_arquivo = f\"{txid}.png\"\n                    caminho_arquivo = os.path.join(diretorio_saida, nome_arquivo)\n\n                    if transacao.save_qrcode(caminho_arquivo_saida=caminho_arquivo):\n                        console.print(f\"  \u2705 [green]Sucesso:[/] QR Code para txid '[bold]{txid}[/]'\")\n\n                except Exception as e:\n                    console.print(panel(f\"\u274c Erro na Linha {linha_num}\", f\"N\u00e3o foi poss\u00edvel gerar o QR Code para txid '[bold]{txid}[/]'.\\nMotivo: {e}\"))\n\n        console.print('')\n        console.print(panel(\"\u2705 Gera\u00e7\u00e3o em lote conclu\u00edda!\", f\"QR Codes salvos em: [cyan]{diretorio_saida}\", \"green\"))\n\n    except FileNotFoundError:\n        console.print(panel(\"\u274c Arquivo n\u00e3o encontrado\", f\"O arquivo [bold]{arquivo_csv}[/] n\u00e3o foi encontrado.\"))\n        raise typer.Exit(code=1)\n    except Exception as e:\n        console.print(panel(\"\u274c Ocorreu um erro inesperado no processamento em lote\", f\"{e}\"))\n        raise typer.Exit(code=1)\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.panel","title":"<code>panel(titulo, mensagem, color='red')</code>","text":"<p>Cria um painel formatado para exibi\u00e7\u00e3o de mensagens.</p> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>def panel(titulo, mensagem, color=\"red\"):\n    \"\"\"Cria um painel formatado para exibi\u00e7\u00e3o de mensagens.\"\"\"\n    return Panel(\n        renderable=mensagem,\n        title=titulo,\n        title_align='left',\n        subtitle='PixCore',\n        subtitle_align='left',\n        border_style=color,\n        padding=0,\n        expand=False,\n    )\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.payload","title":"<code>payload(key=typer.Option(None, '--key', '-k', help='Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria).'), name=typer.Option(None, '--name', '-n', help='Nome do benefici\u00e1rio.'), city=typer.Option(None, '--city', '-c', help='Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos).'), amount=typer.Option(None, '--amount', '-a', help='Valor da transa\u00e7\u00e3o. Ex: 10.50'), txid=typer.Option('***', '--txid', '-t', help='ID da transa\u00e7\u00e3o (Transaction ID).'), info=typer.Option(None, '--info', '-i', help='Informa\u00e7\u00f5es adicionais para o pagador.'), cep=typer.Option(None, '--cep', help='CEP do benefici\u00e1rio (formato XXXXXXXX).'), mcc=typer.Option('0000', '--mcc', help='Merchant Category Code (C\u00f3digo da Categoria do Comerciante).'), initiation_method=typer.Option(None, '--initiation-method', help=\"M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico).\"), language=typer.Option(None, '--lang', help='Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US).'), alt_name=typer.Option(None, '--alt-name', help='Nome alternativo do benefici\u00e1rio (em outro idioma).'), alt_city=typer.Option(None, '--alt-city', help='Cidade alternativa do benefici\u00e1rio (em outro idioma).'))</code>","text":"<p>Gera e exibe o payload PIX no formato 'Copia e Cola' (BR Code TLV).</p> <p>Este comando monta a string de pagamento completa, que pode ser copiada e colada em um aplicativo de banco para efetuar o pagamento. \u00c9 a base para a gera\u00e7\u00e3o do QR Code.</p> <p>Se os dados essenciais (chave, nome, cidade) n\u00e3o forem fornecidos atrav\u00e9s das op\u00e7\u00f5es ou de um arquivo de configura\u00e7\u00e3o, o comando solicitar\u00e1 interativamente que sejam digitados.</p> <p>Exemplos de uso:</p> <ul> <li> <p>Gerar um payload com valor definido:     $ pixcore payload --key \"seu-email@exemplo.com\" --name \"Nome Completo\" --city \"SAO PAULO\" --amount 19.99</p> </li> <li> <p>Gerar um payload com valor aberto (a ser digitado pelo pagador):     $ pixcore payload -k \"12345678900\" -n \"Nome Completo\" -c \"SAO PAULO\" --txid \"PEDIDO123\"</p> </li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@app.command(\n    help=\"Gera um payload PIX no formato TLV (Copia e Cola).\",\n)\ndef payload(\n    key: str = typer.Option(None, \"--key\", \"-k\", help=\"Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria).\"),\n    name: str = typer.Option(None, \"--name\", \"-n\", help=\"Nome do benefici\u00e1rio.\"),\n    city: str = typer.Option(None, \"--city\", \"-c\", help=\"Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos).\"),\n    amount: Optional[float] = typer.Option(None, \"--amount\", \"-a\", help=\"Valor da transa\u00e7\u00e3o. Ex: 10.50\"),\n    txid: str = typer.Option(\"***\", \"--txid\", \"-t\", help=\"ID da transa\u00e7\u00e3o (Transaction ID).\"),\n    info: Optional[str] = typer.Option(None, \"--info\", \"-i\", help=\"Informa\u00e7\u00f5es adicionais para o pagador.\"),\n    cep: Optional[str] = typer.Option(None, \"--cep\", help=\"CEP do benefici\u00e1rio (formato XXXXXXXX).\"),\n    mcc: str = typer.Option(\"0000\", \"--mcc\", help=\"Merchant Category Code (C\u00f3digo da Categoria do Comerciante).\"),\n    initiation_method: Optional[str] = typer.Option(None, \"--initiation-method\", help=\"M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico).\"),\n    language: Optional[str] = typer.Option(None, \"--lang\", help=\"Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US).\"),\n    alt_name: Optional[str] = typer.Option(None, \"--alt-name\", help=\"Nome alternativo do benefici\u00e1rio (em outro idioma).\"),\n    alt_city: Optional[str] = typer.Option(None, \"--alt-city\", help=\"Cidade alternativa do benefici\u00e1rio (em outro idioma).\"),\n):\n    \"\"\"\n    Gera e exibe o payload PIX no formato 'Copia e Cola' (BR Code TLV).\n\n    Este comando monta a string de pagamento completa, que pode ser copiada e colada\n    em um aplicativo de banco para efetuar o pagamento. \u00c9 a base para a gera\u00e7\u00e3o\n    do QR Code.\n\n    Se os dados essenciais (chave, nome, cidade) n\u00e3o forem fornecidos atrav\u00e9s das\n    op\u00e7\u00f5es ou de um arquivo de configura\u00e7\u00e3o, o comando solicitar\u00e1 interativamente\n    que sejam digitados.\n\n    Exemplos de uso:\n\n    - Gerar um payload com valor definido:\n        $ pixcore payload --key \"seu-email@exemplo.com\" --name \"Nome Completo\" --city \"SAO PAULO\" --amount 19.99\n\n    - Gerar um payload com valor aberto (a ser digitado pelo pagador):\n        $ pixcore payload -k \"12345678900\" -n \"Nome Completo\" -c \"SAO PAULO\" --txid \"PEDIDO123\"\n    \"\"\"\n    try:\n        config = config_manager.read_config()\n\n        final_key = key or config.get('default', 'key', fallback=None)\n        if not final_key:\n            final_key = typer.prompt(\"Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria)\")\n\n        final_name = name or config.get('default', 'name', fallback=None)\n        if not final_name:\n            final_name = typer.prompt(\"Nome do benefici\u00e1rio\")\n\n        final_city = city or config.get('default', 'city', fallback=None)\n        if not final_city:\n            final_city = typer.prompt(\"Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos)\")\n\n        data = models.PixData(\n            recebedor_nome=final_name,\n            recebedor_cidade=final_city,\n            pix_key=final_key,\n            valor=amount,\n            transacao_id=txid,\n            ponto_iniciacao_metodo=initiation_method,\n            receptor_categoria_code=mcc,\n            recebedor_cep=cep,\n            info_adicional=info,\n            idioma_preferencia=language,\n            recebedor_nome_alt=alt_name,\n            recebedor_cidade_alt=alt_city\n        )\n\n        transacao = brcode.Pix(data)\n        payload_gerado = transacao.payload()\n\n        console.print(payload_gerado)\n\n    except exceptions.GeracaoPayloadError as e:\n        console.print(panel(\"\u274c Erro de Valida\u00e7\u00e3o de Dados\", f\"Campo: [bold]{e.campo}[/bold]\\nMotivo: {e.motivo}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ChavePixInvalidaError as e:\n        console.print(panel(\"\u274c Chave PIX Inv\u00e1lida\", f\"{e}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ProcessamentoImagemError as e:\n        console.print(panel(\"\u274c Erro de Imagem\", f\"{e}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ErroDeESError as e:\n        console.print(panel(\"\u274c Erro ao Salvar Arquivo\", f\"{e}\\nVerifique o caminho e as permiss\u00f5es.\"))\n        raise typer.Exit(code=1)\n\n    except Exception as e:\n        console.print(panel(\"\u274c Ocorreu um erro inesperado\", f\"{e}\"))\n        raise typer.Exit(code=1)\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.qrcode","title":"<code>qrcode(output=typer.Option(None, '--output', '-o', help=\"Caminho e nome do arquivo de sa\u00edda (ex: 'output/pix.png').\"), key=typer.Option(None, '--key', '-k', help='Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria).'), name=typer.Option(None, '--name', '-n', help='Nome do benefici\u00e1rio.'), city=typer.Option(None, '--city', '-c', help='Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos).'), amount=typer.Option(None, '--amount', '-a', help='Valor da transa\u00e7\u00e3o. Ex: 10.50'), txid=typer.Option('***', '--txid', '-t', help='ID da transa\u00e7\u00e3o (Transaction ID).'), info=typer.Option(None, '--info', '-i', help='Informa\u00e7\u00f5es adicionais para o pagador.'), cep=typer.Option(None, '--cep', help='CEP do benefici\u00e1rio (formato XXXXXXXX).'), mcc=typer.Option('0000', '--mcc', help='Merchant Category Code (C\u00f3digo da Categoria do Comerciante).'), initiation_method=typer.Option(None, '--initiation-method', help=\"M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico).\"), language=typer.Option(None, '--lang', help='Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US).'), alt_name=typer.Option(None, '--alt-name', help='Nome alternativo do benefici\u00e1rio (em outro idioma).'), alt_city=typer.Option(None, '--alt-city', help='Cidade alternativa do benefici\u00e1rio (em outro idioma).'), caminho_logo=typer.Option(None, '--logo', '-l', help='Caminho para um arquivo de imagem (ex: pasta/logo.png)'))</code>","text":"<p>Gera um QR Code PIX, salvando em arquivo ou exibindo na tela.</p> <p>Este comando cria a imagem do QR Code a partir dos dados fornecidos. Possui dois modos de opera\u00e7\u00e3o:</p> <ol> <li> <p>Padr\u00e3o: Se a op\u00e7\u00e3o '--output' n\u00e3o for usada, a imagem do QR Code ser\u00e1     aberta no visualizador de imagens padr\u00e3o do seu sistema operacional.</p> </li> <li> <p>Salvar em arquivo: Ao usar a op\u00e7\u00e3o '--output', a imagem \u00e9 salva no     caminho especificado. O formato \u00e9 inferido pela extens\u00e3o do arquivo (ex: .png).</p> </li> </ol> <p>\u00c9 poss\u00edvel customizar o QR Code, por exemplo, adicionando um logo no centro.</p> <p>Exemplos de uso:</p> <ul> <li> <p>Gerar e exibir um QR Code simples na tela:     $ pixcore qrcode -k \"chave-pix\" -n \"Nome\" -c \"CIDADE\" -a 50.00</p> </li> <li> <p>Salvar um QR Code com logo em um arquivo espec\u00edfico:     $ pixcore qrcode -k \"chave-pix\" -n \"Nome\" -c \"CIDADE\" -a 123.45 --logo \"logo.png\" --output \"pix_pagamento.png\"</p> </li> </ul> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>@app.command(\n    help=\"Gera um QR Code PIX.\",\n)\ndef qrcode(\n    output: Optional[str] = typer.Option(None, \"--output\", \"-o\", help=\"Caminho e nome do arquivo de sa\u00edda (ex: 'output/pix.png').\"),\n    key: str = typer.Option(None, \"--key\", \"-k\", help=\"Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria).\"),\n    name: str = typer.Option(None, \"--name\", \"-n\", help=\"Nome do benefici\u00e1rio.\"),\n    city: str = typer.Option(None, \"--city\", \"-c\", help=\"Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos).\"),\n    amount: Optional[float] = typer.Option(None, \"--amount\", \"-a\", help=\"Valor da transa\u00e7\u00e3o. Ex: 10.50\"),\n    txid: str = typer.Option(\"***\", \"--txid\", \"-t\", help=\"ID da transa\u00e7\u00e3o (Transaction ID).\"),\n    info: Optional[str] = typer.Option(None, \"--info\", \"-i\", help=\"Informa\u00e7\u00f5es adicionais para o pagador.\"),\n    cep: Optional[str] = typer.Option(None, \"--cep\", help=\"CEP do benefici\u00e1rio (formato XXXXXXXX).\"),\n    mcc: str = typer.Option(\"0000\", \"--mcc\", help=\"Merchant Category Code (C\u00f3digo da Categoria do Comerciante).\"),\n    initiation_method: Optional[str] = typer.Option(None, \"--initiation-method\", help=\"M\u00e9todo de inicia\u00e7\u00e3o (ex: '11' para est\u00e1tico, '12' para din\u00e2mico).\"),\n    language: Optional[str] = typer.Option(None, \"--lang\", help=\"Idioma de prefer\u00eancia para dados alternativos (ex: pt_BR, en_US).\"),\n    alt_name: Optional[str] = typer.Option(None, \"--alt-name\", help=\"Nome alternativo do benefici\u00e1rio (em outro idioma).\"),\n    alt_city: Optional[str] = typer.Option(None, \"--alt-city\", help=\"Cidade alternativa do benefici\u00e1rio (em outro idioma).\"),\n    caminho_logo: Optional[str] = typer.Option(None, \"--logo\", \"-l\", help=\"Caminho para um arquivo de imagem (ex: pasta/logo.png)\")\n):\n    \"\"\"\n    Gera um QR Code PIX, salvando em arquivo ou exibindo na tela.\n\n    Este comando cria a imagem do QR Code a partir dos dados fornecidos. Possui dois\n    modos de opera\u00e7\u00e3o:\n\n    1.  Padr\u00e3o: Se a op\u00e7\u00e3o '--output' n\u00e3o for usada, a imagem do QR Code ser\u00e1\n        aberta no visualizador de imagens padr\u00e3o do seu sistema operacional.\n\n    2.  Salvar em arquivo: Ao usar a op\u00e7\u00e3o '--output', a imagem \u00e9 salva no\n        caminho especificado. O formato \u00e9 inferido pela extens\u00e3o do arquivo (ex: .png).\n\n    \u00c9 poss\u00edvel customizar o QR Code, por exemplo, adicionando um logo no centro.\n\n    Exemplos de uso:\n\n    - Gerar e exibir um QR Code simples na tela:\n        $ pixcore qrcode -k \"chave-pix\" -n \"Nome\" -c \"CIDADE\" -a 50.00\n\n    - Salvar um QR Code com logo em um arquivo espec\u00edfico:\n        $ pixcore qrcode -k \"chave-pix\" -n \"Nome\" -c \"CIDADE\" -a 123.45 --logo \"logo.png\" --output \"pix_pagamento.png\"\n    \"\"\"\n    try:\n        config = config_manager.read_config()\n\n        final_key = key or config.get('default', 'key', fallback=None)\n        if not final_key:\n            final_key = typer.prompt(\"Chave PIX (CPF/CNPJ, e-mail, celular ou aleat\u00f3ria)\")\n\n        final_name = name or config.get('default', 'name', fallback=None)\n        if not final_name:\n            final_name = typer.prompt(\"Nome do benefici\u00e1rio\")\n\n        final_city = city or config.get('default', 'city', fallback=None)\n        if not final_city:\n            final_city = typer.prompt(\"Cidade do benefici\u00e1rio (mai\u00fasculas, sem acentos)\")\n\n        data = models.PixData(\n            recebedor_nome=final_name,\n            recebedor_cidade=final_city,\n            pix_key=final_key,\n            valor=amount,\n            transacao_id=txid,\n            ponto_iniciacao_metodo=initiation_method,\n            receptor_categoria_code=mcc,\n            recebedor_cep=cep,\n            info_adicional=info,\n            idioma_preferencia=language,\n            recebedor_nome_alt=alt_name,\n            recebedor_cidade_alt=alt_city\n        )\n\n        transacao = brcode.Pix(data)\n        if output:\n            output_dir = os.path.dirname(output)\n            if output_dir:\n                os.makedirs(output_dir, exist_ok=True)\n            if transacao.save_qrcode(caminho_arquivo_saida=output, caminho_logo=caminho_logo):\n                console.print(panel(\"\u2705 QR Code gerado com sucesso\", f\"QR Code salvo em: {output}\", \"green\"))\n        else:\n            imagem_pillow = transacao.qrcode(\n                caminho_logo=caminho_logo, \n                cor_qr=\"black\", \n                cor_fundo=\"white\",\n                box_size=10,\n                border=4\n            )\n            imagem_pillow.show()\n\n    except exceptions.GeracaoPayloadError as e:\n        console.print(panel(\"\u274c Erro de Valida\u00e7\u00e3o de Dados\", f\"Campo: [bold]{e.campo}[/bold]\\nMotivo: {e.motivo}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ChavePixInvalidaError as e:\n        console.print(panel(\"\u274c Chave PIX Inv\u00e1lida\", f\"{e}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ProcessamentoImagemError as e:\n        console.print(panel(\"\u274c Erro de Imagem\", f\"{e}\"))\n        raise typer.Exit(code=1)\n\n    except exceptions.ErroDeESError as e:\n        console.print(panel(\"\u274c Erro ao Salvar Arquivo\", f\"{e}\\nVerifique o caminho e as permiss\u00f5es.\"))\n        raise typer.Exit(code=1)\n\n    except Exception as e:\n        console.print(panel(\"\u274c Ocorreu um erro inesperado\", f\"{e}\"))\n        raise typer.Exit(code=1)\n</code></pre>"},{"location":"api/CLI/#pixcore.cli.version_callback","title":"<code>version_callback(value)</code>","text":"<p>Exibe a vers\u00e3o do programa e encerra.</p> Source code in <code>src\\pixcore\\cli.py</code> <pre><code>def version_callback(value: bool):\n    \"\"\"Exibe a vers\u00e3o do programa e encerra.\"\"\"\n    if value:\n        console.print(f\"PixCore CLI Vers\u00e3o: [cyan][b]{__version__}\")\n        raise typer.Exit()\n</code></pre>"},{"location":"api/Config_Manager/","title":"Config Manager","text":""},{"location":"api/Config_Manager/#pixcore.config_manager.get_config_as_dict","title":"<code>get_config_as_dict()</code>","text":"<p>Retorna todas as configura\u00e7\u00f5es como um dicion\u00e1rio.</p> Source code in <code>src\\pixcore\\config_manager.py</code> <pre><code>def get_config_as_dict() -&gt; dict:\n    \"\"\"Retorna todas as configura\u00e7\u00f5es como um dicion\u00e1rio.\"\"\"\n    config = read_config()\n    return {section: dict(config.items(section)) for section in config.sections()}\n</code></pre>"},{"location":"api/Config_Manager/#pixcore.config_manager.read_config","title":"<code>read_config()</code>","text":"<p>L\u00ea o arquivo de configura\u00e7\u00e3o e retorna um objeto ConfigParser.</p> Source code in <code>src\\pixcore\\config_manager.py</code> <pre><code>def read_config() -&gt; configparser.ConfigParser:\n    \"\"\"L\u00ea o arquivo de configura\u00e7\u00e3o e retorna um objeto ConfigParser.\"\"\"\n    _ensure_config_exists()\n    config = configparser.ConfigParser()\n    config.read(CONFIG_FILE)\n    return config\n</code></pre>"},{"location":"api/Config_Manager/#pixcore.config_manager.set_value","title":"<code>set_value(section, key, value)</code>","text":"<p>Define um valor em uma determinada se\u00e7\u00e3o do arquivo de configura\u00e7\u00e3o.</p> Source code in <code>src\\pixcore\\config_manager.py</code> <pre><code>def set_value(section: str, key: str, value: str):\n    \"\"\"Define um valor em uma determinada se\u00e7\u00e3o do arquivo de configura\u00e7\u00e3o.\"\"\"\n    config = read_config()\n    if not config.has_section(section):\n        config.add_section(section)\n    config.set(section, key, value)\n    write_config(config)\n</code></pre>"},{"location":"api/Config_Manager/#pixcore.config_manager.write_config","title":"<code>write_config(config)</code>","text":"<p>Escreve o objeto ConfigParser de volta no arquivo.</p> Source code in <code>src\\pixcore\\config_manager.py</code> <pre><code>def write_config(config: configparser.ConfigParser):\n    \"\"\"Escreve o objeto ConfigParser de volta no arquivo.\"\"\"\n    with open(CONFIG_FILE, 'w') as configfile:\n        config.write(configfile)\n</code></pre>"},{"location":"api/Constantes/","title":"Constantes","text":"<p>M\u00f3dulo de Constantes para o BR Code Pix.</p> <p>Este arquivo centraliza todos os identificadores (IDs/Tags) e valores fixos utilizados na constru\u00e7\u00e3o do payload do BR Code, conforme as especifica\u00e7\u00f5es do padr\u00e3o EMV\u00ae Merchant Presented Mode (MPM) utilizado pelo Pix.</p> <p>A centraliza\u00e7\u00e3o desses valores facilita a manuten\u00e7\u00e3o e garante consist\u00eancia na gera\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"api/Decodificar/","title":"Decodificar","text":""},{"location":"api/Decodificar/#pixcore.decipher.decode","title":"<code>decode(payload)</code>","text":"<p>Decodifica um payload completo do BR Code Pix, validando seu CRC16.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>str</code> <p>A string completa do \"Copia e Cola\" do Pix.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Um dicion\u00e1rio com os dados do Pix decodificados de forma estruturada.</p> <p>Raises:</p> Type Description <code>CRCInvalidoError</code> <p>Se o checksum CRC16 do payload for inv\u00e1lido.</p> <code>DecodificacaoPayloadError</code> <p>Se o payload for malformado.</p> Source code in <code>src\\pixcore\\decipher.py</code> <pre><code>def decode(payload: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Decodifica um payload completo do BR Code Pix, validando seu CRC16.\n\n    Args:\n        payload (str): A string completa do \"Copia e Cola\" do Pix.\n\n    Returns:\n        Dict[str, Any]: Um dicion\u00e1rio com os dados do Pix decodificados de forma estruturada.\n\n    Raises:\n        exceptions.CRCInvalidoError: Se o checksum CRC16 do payload for inv\u00e1lido.\n        exceptions.DecodificacaoPayloadError: Se o payload for malformado.\n    \"\"\"\n    if len(payload) &lt; 8 or payload[-8:-4] != f\"{const.ID_CRC16}04\":\n        raise exceptions.DecodificacaoPayloadError(\"Formato do campo CRC16 inv\u00e1lido ou ausente.\")\n\n    payload_to_check = payload[:-8]\n    received_crc = payload[-4:]\n\n    expected_crc = utils.calculate_crc16(payload_to_check + f\"{const.ID_CRC16}04\")\n\n    if received_crc.upper() != expected_crc.upper():\n        raise exceptions.CRCInvalidoError(esperado=expected_crc, recebido=received_crc)\n\n    data_payload = payload_to_check\n    decoded_data: Dict[str, Any] = {}\n\n    for id_field, _, value in utils.parse_tlv(data_payload):\n        match id_field:\n            case const.ID_PAYLOAD_FORMAT_INDICATOR:\n                decoded_data['payload_format_indicator'] = value\n            case const.ID_POINT_OF_INITIATION_METHOD:\n                decoded_data['point_of_initiation_method'] = value\n            case const.ID_MERCHANT_CATEGORY_CODE:\n                decoded_data['merchant_category_code'] = value\n            case const.ID_TRANSACTION_CURRENCY:\n                decoded_data['transaction_currency'] = value\n            case const.ID_TRANSACTION_AMOUNT:\n                decoded_data['transaction_amount'] = float(value)\n            case const.ID_COUNTRY_CODE:\n                decoded_data['country_code'] = value\n            case const.ID_MERCHANT_NAME:\n                decoded_data['merchant_name'] = value\n            case const.ID_MERCHANT_CITY:\n                decoded_data['merchant_city'] = value\n            case const.ID_POSTAL_CODE:\n                decoded_data['postal_code'] = value\n            case const.ID_MERCHANT_ACCOUNT_INFORMATION:\n                decoded_data.update(_parse_merchant_account_info(value))\n            case const.ID_ADDITIONAL_DATA_FIELD_TEMPLATE:\n                decoded_data.update(_parse_additional_data_field(value))\n            case const.ID_MERCHANT_INFO_LANGUAGE_TEMPLATE:\n                decoded_data.update(_parse_language_template(value))\n\n    return decoded_data\n</code></pre>"},{"location":"api/Excess%C3%B5es/","title":"Excess\u00f5es","text":"<p>M\u00f3dulo de Exce\u00e7\u00f5es Personalizadas para a Biblioteca PixCore.</p> <p>Este m\u00f3dulo define uma hierarquia de exce\u00e7\u00f5es customizadas para lidar com erros espec\u00edficos que podem ocorrer durante a gera\u00e7\u00e3o e processamento de c\u00f3digos Pix, como valida\u00e7\u00e3o de chaves, gera\u00e7\u00e3o de payload e manipula\u00e7\u00e3o de arquivos.</p>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.CRCInvalidoError","title":"<code>CRCInvalidoError</code>","text":"<p>               Bases: <code>DecodificacaoPayloadError</code></p> <p>Levantado quando o CRC16 do payload \u00e9 inv\u00e1lido.</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class CRCInvalidoError(DecodificacaoPayloadError):\n    \"\"\"Levantado quando o CRC16 do payload \u00e9 inv\u00e1lido.\"\"\"\n    def __init__(self, esperado: str, recebido: str):\n        self.esperado = esperado\n        self.recebido = recebido\n        mensagem = f\"CRC16 inv\u00e1lido. Esperado: {esperado}, Recebido: {recebido}.\"\n        super().__init__(motivo=mensagem)\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.ChavePixInvalidaError","title":"<code>ChavePixInvalidaError</code>","text":"<p>               Bases: <code>PixCoreError</code></p> <p>Levantada quando uma chave Pix n\u00e3o passa nos crit\u00e9rios de valida\u00e7\u00e3o.</p> <p>Isso pode ocorrer por formato incorreto, checksum inv\u00e1lido ou outros problemas de integridade da chave fornecida.</p> <p>:ivar chave: A chave Pix que foi considerada inv\u00e1lida. :ivar motivo: A descri\u00e7\u00e3o do motivo pelo qual a chave falhou na valida\u00e7\u00e3o.</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class ChavePixInvalidaError(PixCoreError):\n    \"\"\"\n    Levantada quando uma chave Pix n\u00e3o passa nos crit\u00e9rios de valida\u00e7\u00e3o.\n\n    Isso pode ocorrer por formato incorreto, checksum inv\u00e1lido ou outros\n    problemas de integridade da chave fornecida.\n\n    :ivar chave: A chave Pix que foi considerada inv\u00e1lida.\n    :ivar motivo: A descri\u00e7\u00e3o do motivo pelo qual a chave falhou na valida\u00e7\u00e3o.\n    \"\"\"\n    def __init__(self, chave: str, motivo: str):\n        self.chave: str = chave\n        self.motivo: str = motivo\n        mensagem = f\"A chave Pix '{chave}' \u00e9 inv\u00e1lida. Motivo: {motivo}\"\n        super().__init__(mensagem)\n\n    def __str__(self) -&gt; str:\n        chave_parcial = f\"{self.chave[:15]}...\" if len(self.chave) &gt; 15 else self.chave\n        return f\"Valida\u00e7\u00e3o da chave Pix falhou: {self.motivo} (chave: '{chave_parcial}')\"\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.DecodificacaoPayloadError","title":"<code>DecodificacaoPayloadError</code>","text":"<p>               Bases: <code>PixCoreError</code></p> <p>Levantado quando ocorre um erro ao decodificar um payload BRCode.</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class DecodificacaoPayloadError(PixCoreError):\n    \"\"\"Levantado quando ocorre um erro ao decodificar um payload BRCode.\"\"\"\n    def __init__(self, motivo: str):\n        self.motivo = motivo\n        super().__init__(f\"Erro na decodifica\u00e7\u00e3o do payload: {motivo}\")\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.ErroDeESError","title":"<code>ErroDeESError</code>","text":"<p>               Bases: <code>PixCoreError</code></p> <p>Levantada para erros de Entrada/Sa\u00edda (I/O) relacionados a arquivos.</p> <p>Ocorre quando a biblioteca tenta ler ou, mais comumente, salvar um arquivo (como a imagem do QR Code) e encontra um problema no sistema de arquivos, como falta de permiss\u00e3o ou disco cheio.</p> <p>:ivar caminho_arquivo: O caminho do arquivo onde a opera\u00e7\u00e3o de E/S falhou. :ivar motivo: A descri\u00e7\u00e3o do erro (ex: 'permiss\u00e3o negada').</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class ErroDeESError(PixCoreError):\n    \"\"\"\n    Levantada para erros de Entrada/Sa\u00edda (I/O) relacionados a arquivos.\n\n    Ocorre quando a biblioteca tenta ler ou, mais comumente, salvar um arquivo\n    (como a imagem do QR Code) e encontra um problema no sistema de arquivos,\n    como falta de permiss\u00e3o ou disco cheio.\n\n    :ivar caminho_arquivo: O caminho do arquivo onde a opera\u00e7\u00e3o de E/S falhou.\n    :ivar motivo: A descri\u00e7\u00e3o do erro (ex: 'permiss\u00e3o negada').\n    \"\"\"\n    def __init__(self, caminho_arquivo: str, motivo: str):\n        self.caminho_arquivo: str = caminho_arquivo\n        self.motivo: str = motivo\n        super().__init__(f\"Erro de E/S no arquivo '{caminho_arquivo}': {motivo}\")\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.GeracaoPayloadError","title":"<code>GeracaoPayloadError</code>","text":"<p>               Bases: <code>PixCoreError</code></p> <p>Levantada durante a montagem do payload BRCode se um campo for inv\u00e1lido.</p> <p>Indica que um dos campos obrigat\u00f3rios ou opcionais do payload n\u00e3o p\u00f4de ser processado, seja por tamanho excedido, formato incorreto ou valor inadequado.</p> <p>:ivar campo: O nome ou ID do campo que causou o erro. :ivar motivo: A explica\u00e7\u00e3o do erro (ex: 'tamanho excedido', 'formato inv\u00e1lido').</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class GeracaoPayloadError(PixCoreError):\n    \"\"\"\n    Levantada durante a montagem do payload BRCode se um campo for inv\u00e1lido.\n\n    Indica que um dos campos obrigat\u00f3rios ou opcionais do payload n\u00e3o p\u00f4de\n    ser processado, seja por tamanho excedido, formato incorreto ou valor\n    inadequado.\n\n    :ivar campo: O nome ou ID do campo que causou o erro.\n    :ivar motivo: A explica\u00e7\u00e3o do erro (ex: 'tamanho excedido', 'formato inv\u00e1lido').\n    \"\"\"\n    def __init__(self, campo: str, motivo: str):\n        self.campo: str = campo\n        self.motivo: str = motivo\n        mensagem = f\"Erro ao gerar payload. Campo '{campo}': {motivo}\"\n        super().__init__(mensagem)\n\n    def __str__(self) -&gt; str:\n        return f\"N\u00e3o foi poss\u00edvel gerar o payload: {self.motivo} (campo: {self.campo})\"\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.PixCoreError","title":"<code>PixCoreError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exce\u00e7\u00e3o base para todos os erros controlados da biblioteca PixCore.</p> <p>Todas as outras exce\u00e7\u00f5es personalizadas neste m\u00f3dulo herdam desta classe, permitindo que os usu\u00e1rios capturem erros espec\u00edficos ou gen\u00e9ricos da biblioteca com um \u00fanico bloco <code>except</code>.</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class PixCoreError(Exception):\n    \"\"\"\n    Exce\u00e7\u00e3o base para todos os erros controlados da biblioteca PixCore.\n\n    Todas as outras exce\u00e7\u00f5es personalizadas neste m\u00f3dulo herdam desta classe,\n    permitindo que os usu\u00e1rios capturem erros espec\u00edficos ou gen\u00e9ricos da\n    biblioteca com um \u00fanico bloco `except`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/Excess%C3%B5es/#pixcore.exceptions.ProcessamentoImagemError","title":"<code>ProcessamentoImagemError</code>","text":"<p>               Bases: <code>PixCoreError</code></p> <p>Levantada quando ocorre um erro ao processar um arquivo de imagem.</p> <p>Comumente usada para erros ao tentar abrir, redimensionar ou incorporar um logo no QR Code, como em casos de arquivo n\u00e3o encontrado ou formato de imagem n\u00e3o suportado.</p> <p>:ivar caminho_imagem: O caminho do arquivo de imagem que falhou. :ivar motivo: O motivo espec\u00edfico do erro.</p> Source code in <code>src\\pixcore\\exceptions.py</code> <pre><code>class ProcessamentoImagemError(PixCoreError):\n    \"\"\"\n    Levantada quando ocorre um erro ao processar um arquivo de imagem.\n\n    Comumente usada para erros ao tentar abrir, redimensionar ou incorporar\n    um logo no QR Code, como em casos de arquivo n\u00e3o encontrado ou formato\n    de imagem n\u00e3o suportado.\n\n    :ivar caminho_imagem: O caminho do arquivo de imagem que falhou.\n    :ivar motivo: O motivo espec\u00edfico do erro.\n    \"\"\"\n    def __init__(self, caminho_imagem: str, motivo: str):\n        self.caminho_imagem: str = caminho_imagem\n        self.motivo: str = motivo\n        super().__init__(f\"Erro ao processar imagem '{caminho_imagem}': {motivo}\")\n</code></pre>"},{"location":"api/Modelos/","title":"Modelos","text":""},{"location":"api/Modelos/#pixcore.models.PixData","title":"<code>PixData</code>  <code>dataclass</code>","text":"<p>Representa e valida todos os dados para a gera\u00e7\u00e3o de um BR Code Pix.</p> <p>Esta dataclass serve como um cont\u00eainer estruturado para os campos obrigat\u00f3rios e opcionais do padr\u00e3o EMV\u00ae QRCPS, aplicando valida\u00e7\u00f5es autom\u00e1ticas na inicializa\u00e7\u00e3o do objeto para garantir a conformidade e integridade dos dados.</p> <p>Attributes:</p> Name Type Description <code>recebedor_nome</code> <code>str</code> <p>Nome do recebedor/comerciante. Deve ter entre 3 e 25 bytes.</p> <code>recebedor_cidade</code> <code>str</code> <p>Cidade do recebedor/comerciante. Deve ter entre 3 e 15 bytes.</p> <code>pix_key</code> <code>str</code> <p>Chave Pix do recebedor (e-mail, CPF/CNPJ, celular ou chave aleat\u00f3ria). M\u00e1ximo de 77 caracteres.</p> <code>valor</code> <code>Optional[float]</code> <p>O valor da transa\u00e7\u00e3o. Se for <code>None</code> ou <code>0</code>, o QR Code ser\u00e1 gerado com valor aberto,                      permitindo que o pagador insira o valor.</p> <code>transacao_id</code> <code>str</code> <p>Identificador da transa\u00e7\u00e3o (TXID). Deve ser alfanum\u00e9rico com at\u00e9 25 caracteres.                 O padr\u00e3o '***' indica que n\u00e3o \u00e9 utilizado um TXID espec\u00edfico.</p> <code>ponto_iniciacao_metodo</code> <code>Optional[str]</code> <p>Define se o QR Code \u00e9 est\u00e1tico ('11') ou din\u00e2mico ('12').                                     Se <code>None</code>, o campo n\u00e3o \u00e9 inclu\u00eddo no payload.</p> <code>receptor_categoria_code</code> <code>str</code> <p>C\u00f3digo da Categoria do Comerciante (MCC). Padr\u00e3o: \"0000\".</p> <code>recebedor_cep</code> <code>Optional[str]</code> <p>CEP do comerciante. Deve conter exatamente 8 d\u00edgitos num\u00e9ricos.</p> <code>info_adicional</code> <code>Optional[str]</code> <p>Campo de texto livre para informa\u00e7\u00f5es adicionais (n\u00e3o usado diretamente                             na gera\u00e7\u00e3o padr\u00e3o do BR Code, mas \u00fatil para o sistema).</p> <code>idioma_preferencia</code> <code>Optional[str]</code> <p>Idioma para dados alternativos (ex: \"pt_BR\").</p> <code>recebedor_nome_alt</code> <code>Optional[str]</code> <p>Nome alternativo do recebedor (em outro idioma).</p> <code>recebedor_cidade_alt</code> <code>Optional[str]</code> <p>Cidade alternativa do recebedor (em outro idioma).</p> <p>Raises:</p> Type Description <code>GeracaoPayloadError</code> <p>Se qualquer um dos campos n\u00e3o atender \u00e0s regras                             de valida\u00e7\u00e3o (ex: comprimento, formato).</p> <code>ChavePixInvalidaError</code> <p>Se o formato da chave Pix n\u00e3o for reconhecido como v\u00e1lido.</p> <p>Examples:</p> <p>Criando uma inst\u00e2ncia v\u00e1lida de PixData:</p> <pre><code>&gt;&gt;&gt; dados_validos = PixData(\n...     recebedor_nome=\"EMPRESA MODELO\",\n...     recebedor_cidade=\"SAO PAULO\",\n...     pix_key=\"123e4567-e89b-12d3-a456-426655440000\",\n...     valor=10.50,\n...     transacao_id=\"TXID12345\"\n... )\n</code></pre> Source code in <code>src\\pixcore\\models.py</code> <pre><code>@dataclass\nclass PixData:\n    \"\"\"\n    Representa e valida todos os dados para a gera\u00e7\u00e3o de um BR Code Pix.\n\n    Esta dataclass serve como um cont\u00eainer estruturado para os campos\n    obrigat\u00f3rios e opcionais do padr\u00e3o EMV\u00ae QRCPS, aplicando valida\u00e7\u00f5es\n    autom\u00e1ticas na inicializa\u00e7\u00e3o do objeto para garantir a conformidade\n    e integridade dos dados.\n\n    Attributes:\n        recebedor_nome (str): Nome do recebedor/comerciante. Deve ter entre 3 e 25 bytes.\n        recebedor_cidade (str): Cidade do recebedor/comerciante. Deve ter entre 3 e 15 bytes.\n        pix_key (str): Chave Pix do recebedor (e-mail, CPF/CNPJ, celular ou chave aleat\u00f3ria). M\u00e1ximo de 77 caracteres.\n        valor (Optional[float]): O valor da transa\u00e7\u00e3o. Se for `None` ou `0`, o QR Code ser\u00e1 gerado com valor aberto,\n                                 permitindo que o pagador insira o valor.\n        transacao_id (str): Identificador da transa\u00e7\u00e3o (TXID). Deve ser alfanum\u00e9rico com at\u00e9 25 caracteres.\n                            O padr\u00e3o '***' indica que n\u00e3o \u00e9 utilizado um TXID espec\u00edfico.\n        ponto_iniciacao_metodo (Optional[str]): Define se o QR Code \u00e9 est\u00e1tico ('11') ou din\u00e2mico ('12').\n                                                Se `None`, o campo n\u00e3o \u00e9 inclu\u00eddo no payload.\n        receptor_categoria_code (str): C\u00f3digo da Categoria do Comerciante (MCC). Padr\u00e3o: \"0000\".\n        recebedor_cep (Optional[str]): CEP do comerciante. Deve conter exatamente 8 d\u00edgitos num\u00e9ricos.\n        info_adicional (Optional[str]): Campo de texto livre para informa\u00e7\u00f5es adicionais (n\u00e3o usado diretamente\n                                        na gera\u00e7\u00e3o padr\u00e3o do BR Code, mas \u00fatil para o sistema).\n        idioma_preferencia (Optional[str]): Idioma para dados alternativos (ex: \"pt_BR\").\n        recebedor_nome_alt (Optional[str]): Nome alternativo do recebedor (em outro idioma).\n        recebedor_cidade_alt (Optional[str]): Cidade alternativa do recebedor (em outro idioma).\n\n    Raises:\n        exceptions.GeracaoPayloadError: Se qualquer um dos campos n\u00e3o atender \u00e0s regras\n                                        de valida\u00e7\u00e3o (ex: comprimento, formato).\n        exceptions.ChavePixInvalidaError: Se o formato da chave Pix n\u00e3o for reconhecido como v\u00e1lido.\n\n    Examples:\n        Criando uma inst\u00e2ncia v\u00e1lida de PixData:\n        &gt;&gt;&gt; dados_validos = PixData(\n        ...     recebedor_nome=\"EMPRESA MODELO\",\n        ...     recebedor_cidade=\"SAO PAULO\",\n        ...     pix_key=\"123e4567-e89b-12d3-a456-426655440000\",\n        ...     valor=10.50,\n        ...     transacao_id=\"TXID12345\"\n        ... )\n    \"\"\"\n\n    recebedor_nome: str\n    recebedor_cidade: str\n    pix_key: str\n    valor: Optional[float] = None\n    transacao_id: str = \"***\"\n    ponto_iniciacao_metodo: Optional[str] = None\n    receptor_categoria_code: str = \"0000\"\n    recebedor_cep: Optional[str] = None\n    info_adicional: Optional[str] = None\n    idioma_preferencia: Optional[str] = None\n    recebedor_nome_alt: Optional[str] = None\n    recebedor_cidade_alt: Optional[str] = None\n\n    def __post_init__(self):\n        \"\"\"\n        Executa a valida\u00e7\u00e3o dos dados ap\u00f3s a inicializa\u00e7\u00e3o do objeto.\n\n        Este m\u00e9todo \u00e9 chamado automaticamente pelo dataclass e centraliza todas\n        as regras de neg\u00f3cio para garantir a integridade dos dados do PIX.\n        \"\"\"\n        if not self.recebedor_nome or len(self.recebedor_nome.encode('utf-8')) &gt; 25 or len(self.recebedor_nome) &lt; 3:\n            raise exceptions.GeracaoPayloadError(campo='recebedor_nome', motivo=\"O nome do recebedor (recebedor_nome) \u00e9 obrigat\u00f3rio e deve ter entre 3 e 25 bytes.\")\n\n        if not self.recebedor_cidade or len(self.recebedor_cidade.encode('utf-8')) &gt; 15 or len(self.recebedor_cidade) &lt; 3:\n            raise exceptions.GeracaoPayloadError('recebedor_cidade', \"A cidade do recebedor (recebedor_cidade) \u00e9 obrigat\u00f3ria e deve ter entre 3 e 15 bytes.\")\n\n        if self.transacao_id != '***' and not re.match(r'^[a-zA-Z0-9]{1,25}$', self.transacao_id):\n            raise exceptions.GeracaoPayloadError('transacao_id', \"O ID da Transa\u00e7\u00e3o (transacao_id) deve ser alfanum\u00e9rico com at\u00e9 25 caracteres.\")\n\n        if not self.pix_key or len(self.pix_key) &gt; 77: \n            raise exceptions.GeracaoPayloadError('pix_key', \"A chave Pix (pix_key) \u00e9 obrigat\u00f3ria e deve ter at\u00e9 77 caracteres.\")\n        elif self.tipo_chave() == \"Tipo Desconhecido\":\n            raise exceptions.ChavePixInvalidaError(self.pix_key,\"O formato da chave Pix (pix_key) n\u00e3o \u00e9 reconhecido.\")\n\n        if self.valor is not None and self.valor &lt;= 0:\n            raise exceptions.GeracaoPayloadError('valor', \"O valor (valor), se presente, deve ser positivo.\")\n\n        if self.recebedor_cep and not re.match(r'^\\d{8}$', self.recebedor_cep):\n            raise exceptions.GeracaoPayloadError('recebedor_cep', \"O CEP (recebedor_cep) deve conter 8 d\u00edgitos num\u00e9ricos.\")\n\n    def tipo_chave(self) -&gt; str:\n        \"\"\"\n        Identifica o tipo da chave Pix com base em seu formato.\n\n        A verifica\u00e7\u00e3o \u00e9 feita em uma ordem espec\u00edfica para evitar falsos positivos\n        (ex: um CPF ser confundido com um telefone).\n\n        Returns:\n            str: O tipo da chave (ex: \"CPF\", \"Email\", \"Tipo Desconhecido\").\n        \"\"\"\n        chave = self.pix_key\n\n        if validate.validar_chave_aleatoria(chave):\n            return \"Chave Aleat\u00f3ria (EVP)\"\n        elif '@' in chave and validate.validar_email(chave):\n            return \"Email\"\n        elif validate.validar_telefone(chave):\n            return \"Telefone\"\n        elif validate.validar_cpf(chave):\n            return \"CPF\"  \n        elif validate.validar_cnpj(chave):\n            return \"CNPJ\"\n        else:\n            return \"Tipo Desconhecido\"\n</code></pre>"},{"location":"api/Modelos/#pixcore.models.PixData.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Executa a valida\u00e7\u00e3o dos dados ap\u00f3s a inicializa\u00e7\u00e3o do objeto.</p> <p>Este m\u00e9todo \u00e9 chamado automaticamente pelo dataclass e centraliza todas as regras de neg\u00f3cio para garantir a integridade dos dados do PIX.</p> Source code in <code>src\\pixcore\\models.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Executa a valida\u00e7\u00e3o dos dados ap\u00f3s a inicializa\u00e7\u00e3o do objeto.\n\n    Este m\u00e9todo \u00e9 chamado automaticamente pelo dataclass e centraliza todas\n    as regras de neg\u00f3cio para garantir a integridade dos dados do PIX.\n    \"\"\"\n    if not self.recebedor_nome or len(self.recebedor_nome.encode('utf-8')) &gt; 25 or len(self.recebedor_nome) &lt; 3:\n        raise exceptions.GeracaoPayloadError(campo='recebedor_nome', motivo=\"O nome do recebedor (recebedor_nome) \u00e9 obrigat\u00f3rio e deve ter entre 3 e 25 bytes.\")\n\n    if not self.recebedor_cidade or len(self.recebedor_cidade.encode('utf-8')) &gt; 15 or len(self.recebedor_cidade) &lt; 3:\n        raise exceptions.GeracaoPayloadError('recebedor_cidade', \"A cidade do recebedor (recebedor_cidade) \u00e9 obrigat\u00f3ria e deve ter entre 3 e 15 bytes.\")\n\n    if self.transacao_id != '***' and not re.match(r'^[a-zA-Z0-9]{1,25}$', self.transacao_id):\n        raise exceptions.GeracaoPayloadError('transacao_id', \"O ID da Transa\u00e7\u00e3o (transacao_id) deve ser alfanum\u00e9rico com at\u00e9 25 caracteres.\")\n\n    if not self.pix_key or len(self.pix_key) &gt; 77: \n        raise exceptions.GeracaoPayloadError('pix_key', \"A chave Pix (pix_key) \u00e9 obrigat\u00f3ria e deve ter at\u00e9 77 caracteres.\")\n    elif self.tipo_chave() == \"Tipo Desconhecido\":\n        raise exceptions.ChavePixInvalidaError(self.pix_key,\"O formato da chave Pix (pix_key) n\u00e3o \u00e9 reconhecido.\")\n\n    if self.valor is not None and self.valor &lt;= 0:\n        raise exceptions.GeracaoPayloadError('valor', \"O valor (valor), se presente, deve ser positivo.\")\n\n    if self.recebedor_cep and not re.match(r'^\\d{8}$', self.recebedor_cep):\n        raise exceptions.GeracaoPayloadError('recebedor_cep', \"O CEP (recebedor_cep) deve conter 8 d\u00edgitos num\u00e9ricos.\")\n</code></pre>"},{"location":"api/Modelos/#pixcore.models.PixData.tipo_chave","title":"<code>tipo_chave()</code>","text":"<p>Identifica o tipo da chave Pix com base em seu formato.</p> <p>A verifica\u00e7\u00e3o \u00e9 feita em uma ordem espec\u00edfica para evitar falsos positivos (ex: um CPF ser confundido com um telefone).</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>O tipo da chave (ex: \"CPF\", \"Email\", \"Tipo Desconhecido\").</p> Source code in <code>src\\pixcore\\models.py</code> <pre><code>def tipo_chave(self) -&gt; str:\n    \"\"\"\n    Identifica o tipo da chave Pix com base em seu formato.\n\n    A verifica\u00e7\u00e3o \u00e9 feita em uma ordem espec\u00edfica para evitar falsos positivos\n    (ex: um CPF ser confundido com um telefone).\n\n    Returns:\n        str: O tipo da chave (ex: \"CPF\", \"Email\", \"Tipo Desconhecido\").\n    \"\"\"\n    chave = self.pix_key\n\n    if validate.validar_chave_aleatoria(chave):\n        return \"Chave Aleat\u00f3ria (EVP)\"\n    elif '@' in chave and validate.validar_email(chave):\n        return \"Email\"\n    elif validate.validar_telefone(chave):\n        return \"Telefone\"\n    elif validate.validar_cpf(chave):\n        return \"CPF\"  \n    elif validate.validar_cnpj(chave):\n        return \"CNPJ\"\n    else:\n        return \"Tipo Desconhecido\"\n</code></pre>"},{"location":"api/Payload%20Pix/","title":"Payload Pix","text":""},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix","title":"<code>Pix</code>","text":"<p>Classe principal para a gera\u00e7\u00e3o do payload e do QR Code para pagamentos Pix.</p> <p>Esta classe encapsula toda a l\u00f3gica necess\u00e1ria para criar um BR Code Pix em conformidade com as especifica\u00e7\u00f5es do Banco Central do Brasil. Permite a gera\u00e7\u00e3o do payload em formato string e a cria\u00e7\u00e3o de uma imagem de QR Code customiz\u00e1vel.</p> <p>Parameters:</p> Name Type Description Default <code>pix_data</code> <code>PixData</code> <p>Objeto do tipo PixData contendo todas as informa\u00e7\u00f5es necess\u00e1rias para a gera\u00e7\u00e3o do Pix.</p> required Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>class Pix:\n    \"\"\"\n    Classe principal para a gera\u00e7\u00e3o do payload e do QR Code para pagamentos Pix.\n\n    Esta classe encapsula toda a l\u00f3gica necess\u00e1ria para criar um BR Code Pix\n    em conformidade com as especifica\u00e7\u00f5es do Banco Central do Brasil.\n    Permite a gera\u00e7\u00e3o do payload em formato string e a cria\u00e7\u00e3o de uma imagem\n    de QR Code customiz\u00e1vel.\n\n    Parameters:\n        pix_data (PixData): Objeto do tipo PixData contendo todas as informa\u00e7\u00f5es necess\u00e1rias para a gera\u00e7\u00e3o do Pix.\n    \"\"\"\n    def __init__(self, pix_data: PixData):\n        self.pix_data = pix_data\n\n    def _build_merchant_account_info(self) -&gt; str:\n        gui = utils.format_tlv(const.ID_GUI, const.GUI_BR_BCB_PIX)\n        pix_key = utils.format_tlv(const.ID_PIX_KEY, self.pix_data.pix_key)\n\n        value = f\"{gui}{pix_key}\"\n\n        return utils.format_tlv(const.ID_MERCHANT_ACCOUNT_INFORMATION, value)\n\n    def _build_additional_data(self) -&gt; str:\n        txid = utils.format_tlv(const.ID_TRANSACTION_ID, self.pix_data.transacao_id)\n        return utils.format_tlv(const.ID_ADDITIONAL_DATA_FIELD_TEMPLATE, txid)\n\n    def _build_language_template(self) -&gt; str:\n        parts = []\n        if self.pix_data.idioma_preferencia:\n            parts.append(utils.format_tlv(const.ID_LANGUAGE_PREFERENCE, self.pix_data.idioma_preferencia))\n        if self.pix_data.recebedor_nome_alt:\n            parts.append(utils.format_tlv(const.ID_MERCHANT_NAME_ALT, self.pix_data.recebedor_nome_alt))\n        if self.pix_data.recebedor_cidade_alt:\n            parts.append(utils.format_tlv(const.ID_MERCHANT_CITY_ALT, self.pix_data.recebedor_cidade_alt))\n\n        if not parts:\n            return \"\"\n\n        return utils.format_tlv(const.ID_MERCHANT_INFO_LANGUAGE_TEMPLATE, \"\".join(parts))\n\n    def payload(self) -&gt; str:\n        \"\"\"\n        Gera o payload completo do BR Code no formato TLV (Copia e Cola).\n\n        O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as\n        informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.\n\n        Returns:\n            str: O payload completo e formatado, incluindo o CRC16.\n\n        Examples:\n            &gt;&gt;&gt; pix_data = PixData(...)\n            &gt;&gt;&gt; pix_generator = Pix(pix_data)\n            &gt;&gt;&gt; br_code = pix_generator.payload()\n            &gt;&gt;&gt; print(br_code)\n            '00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n        \"\"\"\n        payload_parts = [\n            utils.format_tlv(const.ID_PAYLOAD_FORMAT_INDICATOR, const.PAYLOAD_FORMAT_INDICATOR_VALUE),\n        ]\n\n        if self.pix_data.ponto_iniciacao_metodo:\n            payload_parts.append(utils.format_tlv(const.ID_POINT_OF_INITIATION_METHOD, self.pix_data.ponto_iniciacao_metodo))\n\n        payload_parts.extend([\n            self._build_merchant_account_info(),\n            utils.format_tlv(const.ID_MERCHANT_CATEGORY_CODE, self.pix_data.receptor_categoria_code),\n            utils.format_tlv(const.ID_TRANSACTION_CURRENCY, const.TRANSACTION_CURRENCY_BRL),\n        ])\n\n        if self.pix_data.valor:\n            amount_str = f\"{self.pix_data.valor:.2f}\"\n            payload_parts.append(utils.format_tlv(const.ID_TRANSACTION_AMOUNT, amount_str))\n\n        payload_parts.extend([\n            utils.format_tlv(const.ID_COUNTRY_CODE, const.COUNTRY_CODE_BR),\n            utils.format_tlv(const.ID_MERCHANT_NAME, self.pix_data.recebedor_nome),\n            utils.format_tlv(const.ID_MERCHANT_CITY, self.pix_data.recebedor_cidade),\n        ])\n\n        if self.pix_data.recebedor_cep:\n            payload_parts.append(utils.format_tlv(const.ID_POSTAL_CODE, self.pix_data.recebedor_cep))\n\n        payload_parts.extend([\n            self._build_additional_data(),\n            self._build_language_template()\n        ])\n\n        payload = \"\".join(filter(None, payload_parts))\n\n        crc = utils.calculate_crc16(payload + const.ID_CRC16 + \"04\")\n        payload += utils.format_tlv(const.ID_CRC16, crc)\n\n        return payload\n\n    def qrcode(self, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\", box_size: int = 10, border: int = 4) -&gt; Image.Image:\n        \"\"\"\n        Gera um objeto de imagem (Pillow) do QR Code a partir do payload.\n\n        Args:\n            caminho_logo (str, optional): O caminho para um arquivo de imagem (ex: .png)\n                                          a ser centralizado no QR Code. Defaults to None.\n            cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor\n                                    (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").\n                                    Defaults to \"black\".\n            cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n            box_size (int, optional): O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.\n            border (int, optional): A largura da borda em \"boxes\". Defaults to 4.\n\n        Returns:\n            Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.\n\n        Raises:\n            exceptions.ProcessamentoImagemError: Se ocorrer um erro ao processar o\n                                                 arquivo de logo (ex: n\u00e3o encontrado, corrompido).\n        \"\"\"\n        payload_str = self.payload()\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_H,\n            box_size=box_size,\n            border=border,\n        )\n        qr.add_data(payload_str)\n        qr.make(fit=True)\n\n        img_qr = qr.make_image(fill_color=cor_qr, back_color=cor_fundo).convert('RGB')\n\n        if caminho_logo:\n            try:\n                logo = Image.open(caminho_logo)\n                tamanho_max_logo = int(img_qr.size[0] * 0.25)\n                logo.thumbnail((tamanho_max_logo, tamanho_max_logo))\n\n                pos_x = (img_qr.size[0] - logo.size[0]) // 2\n                pos_y = (img_qr.size[1] - logo.size[1]) // 2\n\n                img_qr.paste(logo, (pos_x, pos_y), mask=logo)\n            except FileNotFoundError:\n                raise exceptions.ProcessamentoImagemError(\n                    caminho_imagem=caminho_logo,\n                    motivo=\"Arquivo n\u00e3o encontrado.\"\n                ) from None\n\n            except Exception as e:\n                # Erro gen\u00e9rico de processamento.\n                raise exceptions.ProcessamentoImagemError(\n                    caminho_imagem=caminho_logo,\n                    motivo=f\"Erro desconhecido ao processar o logo: {e}\"\n                ) from e\n\n        return img_qr\n\n    def save_qrcode(self, caminho_arquivo_saida: str, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\", box_size: int = 10, border: int = 4):\n        \"\"\"\n        Gera e salva a imagem do QR Code diretamente em um arquivo.\n\n        Args:\n            caminho_arquivo_saida (str): O caminho e nome do arquivo onde a imagem\n                                         do QR Code ser\u00e1 salva (ex: 'output/pix.png').\n            caminho_logo (str, optional): O caminho para um arquivo de imagem a ser\n                                          centralizado no QR Code. Defaults to None.\n            cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".\n            cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n            box_size (int, optional): O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.\n            border (int, optional): A largura da borda em \"boxes\". Defaults to 4.\n\n        Raises:\n            exceptions.ErroDeESError: Se ocorrer um erro ao salvar o arquivo\n                                      (ex: permiss\u00e3o negada, caminho inv\u00e1lido).\n            exceptions.ProcessamentoImagemError: Se ocorrer um erro ao processar o\n                                                 arquivo de logo.\n\n        Examples:\n            &gt;&gt;&gt; pix_data = PixData(...)\n            &gt;&gt;&gt; pix_generator = Pix(pix_data)\n            &gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\n        \"\"\"\n        try:\n            imagem_qr = self.qrcode(\n                caminho_logo=caminho_logo, \n                cor_qr=cor_qr, \n                cor_fundo=cor_fundo,\n                box_size=box_size,\n                border=border\n            )\n            imagem_qr.save(caminho_arquivo_saida)\n            return True\n        except (IOError, PermissionError) as e:\n            raise exceptions.ErroDeESError(\n                caminho_arquivo=caminho_arquivo_saida,\n                motivo=f\"N\u00e3o foi poss\u00edvel salvar o arquivo. Verifique as permiss\u00f5es. Erro original: {e}\"\n            ) from e\n        except Exception as e:\n            raise exceptions.ErroDeESError(\n                caminho_arquivo=caminho_arquivo_saida,\n                motivo=f\"Ocorreu um erro inesperado ao salvar o QR Code: {e}\"\n            ) from e\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.payload","title":"<code>payload()</code>","text":"<p>Gera o payload completo do BR Code no formato TLV (Copia e Cola).</p> <p>O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>O payload completo e formatado, incluindo o CRC16.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pix_data = PixData(...)\n&gt;&gt;&gt; pix_generator = Pix(pix_data)\n&gt;&gt;&gt; br_code = pix_generator.payload()\n&gt;&gt;&gt; print(br_code)\n'00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n</code></pre> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def payload(self) -&gt; str:\n    \"\"\"\n    Gera o payload completo do BR Code no formato TLV (Copia e Cola).\n\n    O payload \u00e9 a string que ser\u00e1 codificada no QR Code, contendo todas as\n    informa\u00e7\u00f5es da transa\u00e7\u00e3o formatadas segundo o padr\u00e3o EMV\u00ae QRCPS.\n\n    Returns:\n        str: O payload completo e formatado, incluindo o CRC16.\n\n    Examples:\n        &gt;&gt;&gt; pix_data = PixData(...)\n        &gt;&gt;&gt; pix_generator = Pix(pix_data)\n        &gt;&gt;&gt; br_code = pix_generator.payload()\n        &gt;&gt;&gt; print(br_code)\n        '00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-426655440000520400005303986540510.005802BR5913NOME DO LOJA6008SAO PAULO62290525txid-gerado-pelo-sistema63041A29'\n    \"\"\"\n    payload_parts = [\n        utils.format_tlv(const.ID_PAYLOAD_FORMAT_INDICATOR, const.PAYLOAD_FORMAT_INDICATOR_VALUE),\n    ]\n\n    if self.pix_data.ponto_iniciacao_metodo:\n        payload_parts.append(utils.format_tlv(const.ID_POINT_OF_INITIATION_METHOD, self.pix_data.ponto_iniciacao_metodo))\n\n    payload_parts.extend([\n        self._build_merchant_account_info(),\n        utils.format_tlv(const.ID_MERCHANT_CATEGORY_CODE, self.pix_data.receptor_categoria_code),\n        utils.format_tlv(const.ID_TRANSACTION_CURRENCY, const.TRANSACTION_CURRENCY_BRL),\n    ])\n\n    if self.pix_data.valor:\n        amount_str = f\"{self.pix_data.valor:.2f}\"\n        payload_parts.append(utils.format_tlv(const.ID_TRANSACTION_AMOUNT, amount_str))\n\n    payload_parts.extend([\n        utils.format_tlv(const.ID_COUNTRY_CODE, const.COUNTRY_CODE_BR),\n        utils.format_tlv(const.ID_MERCHANT_NAME, self.pix_data.recebedor_nome),\n        utils.format_tlv(const.ID_MERCHANT_CITY, self.pix_data.recebedor_cidade),\n    ])\n\n    if self.pix_data.recebedor_cep:\n        payload_parts.append(utils.format_tlv(const.ID_POSTAL_CODE, self.pix_data.recebedor_cep))\n\n    payload_parts.extend([\n        self._build_additional_data(),\n        self._build_language_template()\n    ])\n\n    payload = \"\".join(filter(None, payload_parts))\n\n    crc = utils.calculate_crc16(payload + const.ID_CRC16 + \"04\")\n    payload += utils.format_tlv(const.ID_CRC16, crc)\n\n    return payload\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.qrcode","title":"<code>qrcode(caminho_logo=None, cor_qr='black', cor_fundo='white', box_size=10, border=4)</code>","text":"<p>Gera um objeto de imagem (Pillow) do QR Code a partir do payload.</p> <p>Parameters:</p> Name Type Description Default <code>caminho_logo</code> <code>str</code> <p>O caminho para um arquivo de imagem (ex: .png)                           a ser centralizado no QR Code. Defaults to None.</p> <code>None</code> <code>cor_qr</code> <code>str</code> <p>A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor                     (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").                     Defaults to \"black\".</p> <code>'black'</code> <code>cor_fundo</code> <code>str</code> <p>A cor de fundo do QR Code. Defaults to \"white\".</p> <code>'white'</code> <code>box_size</code> <code>int</code> <p>O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.</p> <code>10</code> <code>border</code> <code>int</code> <p>A largura da borda em \"boxes\". Defaults to 4.</p> <code>4</code> <p>Returns:</p> Type Description <code>Image</code> <p>Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.</p> <p>Raises:</p> Type Description <code>ProcessamentoImagemError</code> <p>Se ocorrer um erro ao processar o                                  arquivo de logo (ex: n\u00e3o encontrado, corrompido).</p> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def qrcode(self, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\", box_size: int = 10, border: int = 4) -&gt; Image.Image:\n    \"\"\"\n    Gera um objeto de imagem (Pillow) do QR Code a partir do payload.\n\n    Args:\n        caminho_logo (str, optional): O caminho para um arquivo de imagem (ex: .png)\n                                      a ser centralizado no QR Code. Defaults to None.\n        cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Pode ser um nome de cor\n                                (ex: \"navy\") ou um c\u00f3digo hexadecimal (ex: \"#000080\").\n                                Defaults to \"black\".\n        cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n        box_size (int, optional): O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.\n        border (int, optional): A largura da borda em \"boxes\". Defaults to 4.\n\n    Returns:\n        Image.Image: Um objeto de imagem da biblioteca Pillow contendo o QR Code.\n\n    Raises:\n        exceptions.ProcessamentoImagemError: Se ocorrer um erro ao processar o\n                                             arquivo de logo (ex: n\u00e3o encontrado, corrompido).\n    \"\"\"\n    payload_str = self.payload()\n\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_H,\n        box_size=box_size,\n        border=border,\n    )\n    qr.add_data(payload_str)\n    qr.make(fit=True)\n\n    img_qr = qr.make_image(fill_color=cor_qr, back_color=cor_fundo).convert('RGB')\n\n    if caminho_logo:\n        try:\n            logo = Image.open(caminho_logo)\n            tamanho_max_logo = int(img_qr.size[0] * 0.25)\n            logo.thumbnail((tamanho_max_logo, tamanho_max_logo))\n\n            pos_x = (img_qr.size[0] - logo.size[0]) // 2\n            pos_y = (img_qr.size[1] - logo.size[1]) // 2\n\n            img_qr.paste(logo, (pos_x, pos_y), mask=logo)\n        except FileNotFoundError:\n            raise exceptions.ProcessamentoImagemError(\n                caminho_imagem=caminho_logo,\n                motivo=\"Arquivo n\u00e3o encontrado.\"\n            ) from None\n\n        except Exception as e:\n            # Erro gen\u00e9rico de processamento.\n            raise exceptions.ProcessamentoImagemError(\n                caminho_imagem=caminho_logo,\n                motivo=f\"Erro desconhecido ao processar o logo: {e}\"\n            ) from e\n\n    return img_qr\n</code></pre>"},{"location":"api/Payload%20Pix/#pixcore.brcode.Pix.save_qrcode","title":"<code>save_qrcode(caminho_arquivo_saida, caminho_logo=None, cor_qr='black', cor_fundo='white', box_size=10, border=4)</code>","text":"<p>Gera e salva a imagem do QR Code diretamente em um arquivo.</p> <p>Parameters:</p> Name Type Description Default <code>caminho_arquivo_saida</code> <code>str</code> <p>O caminho e nome do arquivo onde a imagem                          do QR Code ser\u00e1 salva (ex: 'output/pix.png').</p> required <code>caminho_logo</code> <code>str</code> <p>O caminho para um arquivo de imagem a ser                           centralizado no QR Code. Defaults to None.</p> <code>None</code> <code>cor_qr</code> <code>str</code> <p>A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".</p> <code>'black'</code> <code>cor_fundo</code> <code>str</code> <p>A cor de fundo do QR Code. Defaults to \"white\".</p> <code>'white'</code> <code>box_size</code> <code>int</code> <p>O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.</p> <code>10</code> <code>border</code> <code>int</code> <p>A largura da borda em \"boxes\". Defaults to 4.</p> <code>4</code> <p>Raises:</p> Type Description <code>ErroDeESError</code> <p>Se ocorrer um erro ao salvar o arquivo                       (ex: permiss\u00e3o negada, caminho inv\u00e1lido).</p> <code>ProcessamentoImagemError</code> <p>Se ocorrer um erro ao processar o                                  arquivo de logo.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pix_data = PixData(...)\n&gt;&gt;&gt; pix_generator = Pix(pix_data)\n&gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\n</code></pre> Source code in <code>src\\pixcore\\brcode.py</code> <pre><code>def save_qrcode(self, caminho_arquivo_saida: str, caminho_logo: str = None, cor_qr: str = \"black\", cor_fundo: str = \"white\", box_size: int = 10, border: int = 4):\n    \"\"\"\n    Gera e salva a imagem do QR Code diretamente em um arquivo.\n\n    Args:\n        caminho_arquivo_saida (str): O caminho e nome do arquivo onde a imagem\n                                     do QR Code ser\u00e1 salva (ex: 'output/pix.png').\n        caminho_logo (str, optional): O caminho para um arquivo de imagem a ser\n                                      centralizado no QR Code. Defaults to None.\n        cor_qr (str, optional): A cor dos m\u00f3dulos do QR Code. Defaults to \"black\".\n        cor_fundo (str, optional): A cor de fundo do QR Code. Defaults to \"white\".\n        box_size (int, optional): O tamanho em pixels de cada \"box\" do QR Code. Defaults to 10.\n        border (int, optional): A largura da borda em \"boxes\". Defaults to 4.\n\n    Raises:\n        exceptions.ErroDeESError: Se ocorrer um erro ao salvar o arquivo\n                                  (ex: permiss\u00e3o negada, caminho inv\u00e1lido).\n        exceptions.ProcessamentoImagemError: Se ocorrer um erro ao processar o\n                                             arquivo de logo.\n\n    Examples:\n        &gt;&gt;&gt; pix_data = PixData(...)\n        &gt;&gt;&gt; pix_generator = Pix(pix_data)\n        &gt;&gt;&gt; pix_generator.save_qrcode(\"meu_pix_qr.png\", caminho_logo=\"logo.png\")\n    \"\"\"\n    try:\n        imagem_qr = self.qrcode(\n            caminho_logo=caminho_logo, \n            cor_qr=cor_qr, \n            cor_fundo=cor_fundo,\n            box_size=box_size,\n            border=border\n        )\n        imagem_qr.save(caminho_arquivo_saida)\n        return True\n    except (IOError, PermissionError) as e:\n        raise exceptions.ErroDeESError(\n            caminho_arquivo=caminho_arquivo_saida,\n            motivo=f\"N\u00e3o foi poss\u00edvel salvar o arquivo. Verifique as permiss\u00f5es. Erro original: {e}\"\n        ) from e\n    except Exception as e:\n        raise exceptions.ErroDeESError(\n            caminho_arquivo=caminho_arquivo_saida,\n            motivo=f\"Ocorreu um erro inesperado ao salvar o QR Code: {e}\"\n        ) from e\n</code></pre>"},{"location":"api/Utilidades/","title":"Utilidades","text":""},{"location":"api/Utilidades/#pixcore.utils.calculate_crc16","title":"<code>calculate_crc16(payload)</code>","text":"<p>Calcula o checksum CRC16-CCITT do payload.</p> <p>O c\u00e1lculo \u00e9 realizado conforme o padr\u00e3o EMV\u00ae QRCPS, que utiliza o polin\u00f4mio 0x1021 e valor inicial 0xFFFF. O resultado \u00e9 uma string hexadecimal de 4 caracteres.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>str</code> <p>O payload completo (sem o campo do CRC) para o qual o            checksum ser\u00e1 calculado.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>O checksum CRC16 calculado, formatado como uma string hexadecimal  de 4 caracteres mai\u00fasculos.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; payload_exemplo = \"00020126360014BR.GOV.BCB.PIX0114+5561999999999520400005303986540510.005802BR5913FULANO DE TAL6008BRASILIA62070503***6304\"\n&gt;&gt;&gt; calculate_crc16(payload_exemplo)\n'E3A2'\n</code></pre> Source code in <code>src\\pixcore\\utils.py</code> <pre><code>def calculate_crc16(payload: str) -&gt; str:\n    \"\"\"\n    Calcula o checksum CRC16-CCITT do payload.\n\n    O c\u00e1lculo \u00e9 realizado conforme o padr\u00e3o EMV\u00ae QRCPS, que utiliza o polin\u00f4mio\n    0x1021 e valor inicial 0xFFFF. O resultado \u00e9 uma string hexadecimal de 4\n    caracteres.\n\n    Args:\n        payload (str): O payload completo (sem o campo do CRC) para o qual o\n                       checksum ser\u00e1 calculado.\n\n    Returns:\n        str: O checksum CRC16 calculado, formatado como uma string hexadecimal\n             de 4 caracteres mai\u00fasculos.\n\n    Examples:\n        &gt;&gt;&gt; payload_exemplo = \"00020126360014BR.GOV.BCB.PIX0114+5561999999999520400005303986540510.005802BR5913FULANO DE TAL6008BRASILIA62070503***6304\"\n        &gt;&gt;&gt; calculate_crc16(payload_exemplo)\n        'E3A2'\n    \"\"\"\n    crc = 0xFFFF\n    polynomial = 0x1021\n\n    for byte in payload.encode('utf-8'):\n        crc ^= (byte &lt;&lt; 8)\n        for _ in range(8):\n            if (crc &amp; 0x8000):\n                crc = (crc &lt;&lt; 1) ^ polynomial\n            else:\n                crc &lt;&lt;= 1\n\n    return format(crc &amp; 0xFFFF, 'X').zfill(4)\n</code></pre>"},{"location":"api/Utilidades/#pixcore.utils.format_tlv","title":"<code>format_tlv(id_field, value)</code>","text":"<p>Formata um campo no padr\u00e3o TLV (Type-Length-Value).</p> <p>O formato TLV \u00e9 composto por: - ID (Type): Identificador do campo (2 d\u00edgitos). - Length: Tamanho do valor (2 d\u00edgitos). - Value: O dado em si.</p> <p>Parameters:</p> Name Type Description Default <code>id_field</code> <code>str</code> <p>O identificador do campo (ID ou \"Tag\").</p> required <code>value</code> <code>str</code> <p>O valor do campo.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string formatada em TLV. Ex: \"5913NOME DO LOJA\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_tlv(\"59\", \"EMPRESA MODELO\")\n'5914EMPRESA MODELO'\n&gt;&gt;&gt; format_tlv(\"53\", \"986\")\n'5303986'\n</code></pre> Source code in <code>src\\pixcore\\utils.py</code> <pre><code>def format_tlv(id_field: str, value: str) -&gt; str:\n    \"\"\"\n    Formata um campo no padr\u00e3o TLV (Type-Length-Value).\n\n    O formato TLV \u00e9 composto por:\n    - ID (Type): Identificador do campo (2 d\u00edgitos).\n    - Length: Tamanho do valor (2 d\u00edgitos).\n    - Value: O dado em si.\n\n    Args:\n        id_field (str): O identificador do campo (ID ou \"Tag\").\n        value (str): O valor do campo.\n\n    Returns:\n        str: A string formatada em TLV. Ex: \"5913NOME DO LOJA\".\n\n    Examples:\n        &gt;&gt;&gt; format_tlv(\"59\", \"EMPRESA MODELO\")\n        '5914EMPRESA MODELO'\n        &gt;&gt;&gt; format_tlv(\"53\", \"986\")\n        '5303986'\n    \"\"\"\n    length = str(len(value)).zfill(2)\n    return f\"{id_field}{length}{value}\"\n</code></pre>"},{"location":"api/Utilidades/#pixcore.utils.parse_tlv","title":"<code>parse_tlv(payload)</code>","text":"<p>Parseia uma string de payload no formato TLV e retorna os campos.</p> <p>Esta fun\u00e7\u00e3o atua como um gerador, processando a string do payload de forma iterativa. A cada itera\u00e7\u00e3o, ela l\u00ea um campo completo (ID, Tamanho, Valor) e o retorna como uma tupla (ID, Tamanho, Valor).</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>str</code> <p>A string contendo m\u00faltiplos campos TLV concatenados.</p> required <p>Yields:</p> Type Description <code>Tuple[str, int, str]</code> <p>Generator[Tuple[str, int, str], None, None]: Uma tupla contendo (ID, Tamanho, Valor).</p> <p>Raises:</p> Type Description <code>DecodificacaoPayloadError</code> <p>Se a string de tamanho (length)                                    n\u00e3o for um n\u00famero v\u00e1lido, indicando                                    um payload malformado.</p> Source code in <code>src\\pixcore\\utils.py</code> <pre><code>def parse_tlv(payload: str) -&gt; Generator[Tuple[str, int, str], None, None]:\n    \"\"\"\n    Parseia uma string de payload no formato TLV e retorna os campos.\n\n    Esta fun\u00e7\u00e3o atua como um gerador, processando a string do payload\n    de forma iterativa. A cada itera\u00e7\u00e3o, ela l\u00ea um campo completo (ID, Tamanho, Valor)\n    e o retorna como uma tupla (ID, Tamanho, Valor).\n\n    Args:\n        payload (str): A string contendo m\u00faltiplos campos TLV concatenados.\n\n    Yields:\n        Generator[Tuple[str, int, str], None, None]: Uma tupla contendo (ID, Tamanho, Valor).\n\n    Raises:\n        exceptions.DecodificacaoPayloadError: Se a string de tamanho (length)\n                                               n\u00e3o for um n\u00famero v\u00e1lido, indicando\n                                               um payload malformado.\n    \"\"\"\n    index = 0\n    while index &lt; len(payload):\n        id_field = payload[index : index + 2]\n        index += 2\n\n        length_str = payload[index : index + 2]\n        index += 2\n\n        try:\n            value_length = int(length_str)\n        except ValueError:\n            raise exceptions.DecodificacaoPayloadError(\n                f\"Tamanho de campo inv\u00e1lido. Esperava um n\u00famero, mas recebi '{length_str}'.\"\n            ) from None\n\n        value = payload[index : index + value_length]\n        index += value_length\n\n        yield (id_field, value_length,value)\n</code></pre>"},{"location":"api/Validar%20Chave%20Pix/","title":"Validar Chave Pix","text":""},{"location":"api/Validar%20Chave%20Pix/#pixcore.validate.validar_chave_aleatoria","title":"<code>validar_chave_aleatoria(chave_aleatoria)</code>","text":"<p>Valida uma Chave Aleat\u00f3ria Pix (EVP) verificando se est\u00e1 no formato UUID.</p> <p>Uma chave aleat\u00f3ria do Pix deve ser um Identificador \u00danico Universal (UUID) vers\u00e3o 4. Esta fun\u00e7\u00e3o checa se a string fornecida corresponde a esse padr\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>chave_aleatoria</code> <code>str</code> <p>A string da chave a ser validada.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Retorna <code>True</code> se a chave for um UUID v\u00e1lido, e <code>False</code>   caso contr\u00e1rio.</p> Source code in <code>src\\pixcore\\validate.py</code> <pre><code>def validar_chave_aleatoria(chave_aleatoria: str) -&gt; bool:\n    \"\"\"\n    Valida uma Chave Aleat\u00f3ria Pix (EVP) verificando se est\u00e1 no formato UUID.\n\n    Uma chave aleat\u00f3ria do Pix deve ser um Identificador \u00danico Universal (UUID)\n    vers\u00e3o 4. Esta fun\u00e7\u00e3o checa se a string fornecida corresponde a esse padr\u00e3o.\n\n    Args:\n        chave_aleatoria (str): A string da chave a ser validada.\n\n    Returns:\n        bool: Retorna `True` se a chave for um UUID v\u00e1lido, e `False`\n              caso contr\u00e1rio.\n    \"\"\"\n    if not isinstance(chave_aleatoria, str):\n        return False\n\n    try:\n        uuid.UUID(chave_aleatoria)\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"api/Validar%20Chave%20Pix/#pixcore.validate.validar_cnpj","title":"<code>validar_cnpj(cnpj)</code>","text":"<p>Valida um n\u00famero de Cadastro Nacional da Pessoa Jur\u00eddica (CNPJ).</p> <p>A fun\u00e7\u00e3o remove caracteres n\u00e3o num\u00e9ricos, verifica se o CNPJ possui 14 d\u00edgitos, descarta sequ\u00eancias com todos os d\u00edgitos iguais e valida os d\u00edgitos verificadores com base no algoritmo oficial.</p> <p>Parameters:</p> Name Type Description Default <code>cnpj</code> <code>str</code> <p>O n\u00famero de CNPJ a ser validado, com ou sem formata\u00e7\u00e3o         (ex: '00.000.000/0001-91').</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Retorna <code>True</code> se o CNPJ for v\u00e1lido, e <code>False</code> caso contr\u00e1rio.</p> Source code in <code>src\\pixcore\\validate.py</code> <pre><code>def validar_cnpj(cnpj: str) -&gt; bool:\n    \"\"\"\n    Valida um n\u00famero de Cadastro Nacional da Pessoa Jur\u00eddica (CNPJ).\n\n    A fun\u00e7\u00e3o remove caracteres n\u00e3o num\u00e9ricos, verifica se o CNPJ possui 14\n    d\u00edgitos, descarta sequ\u00eancias com todos os d\u00edgitos iguais e valida os\n    d\u00edgitos verificadores com base no algoritmo oficial.\n\n    Args:\n        cnpj (str): O n\u00famero de CNPJ a ser validado, com ou sem formata\u00e7\u00e3o\n                    (ex: '00.000.000/0001-91').\n\n    Returns:\n        bool: Retorna `True` se o CNPJ for v\u00e1lido, e `False` caso contr\u00e1rio.\n    \"\"\"\n    cnpj = \"\".join(re.findall(r'\\d', str(cnpj)))\n\n    if len(cnpj) != 14:\n        return False\n\n    if cnpj in (c * 14 for c in \"0123456789\"):\n        return False\n\n    cnpj_base = [int(d) for d in cnpj[:12]]\n    digitos_verificadores = [int(d) for d in cnpj[12:]]\n\n    pesos_dv1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]\n    soma_dv1 = sum(num * peso for num, peso in zip(cnpj_base, pesos_dv1))\n\n    resto_dv1 = soma_dv1 % 11\n    dv1_calculado = 0 if resto_dv1 &lt; 2 else 11 - resto_dv1\n\n    if dv1_calculado != digitos_verificadores[0]:\n        return False\n\n    cnpj_com_dv1 = cnpj_base + [dv1_calculado]\n    pesos_dv2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]\n    soma_dv2 = sum(num * peso for num, peso in zip(cnpj_com_dv1, pesos_dv2))\n\n    resto_dv2 = soma_dv2 % 11\n    dv2_calculado = 0 if resto_dv2 &lt; 2 else 11 - resto_dv2\n\n    if dv2_calculado != digitos_verificadores[1]:\n        return False\n\n    return True\n</code></pre>"},{"location":"api/Validar%20Chave%20Pix/#pixcore.validate.validar_cpf","title":"<code>validar_cpf(cpf)</code>","text":"<p>Valida um n\u00famero de Cadastro de Pessoas F\u00edsicas (CPF).</p> <p>A fun\u00e7\u00e3o remove caracteres n\u00e3o num\u00e9ricos, verifica se o CPF tem 11 d\u00edgitos, descarta CPFs com todos os d\u00edgitos iguais e calcula os dois d\u00edgitos verificadores para garantir a validade do n\u00famero.</p> <p>Parameters:</p> Name Type Description Default <code>cpf</code> <code>str</code> <p>O n\u00famero de CPF a ser validado, podendo conter ou n\u00e3o        caracteres de formata\u00e7\u00e3o (ex: '123.456.789-00').</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Retorna <code>True</code> se o CPF for v\u00e1lido, e <code>False</code> caso contr\u00e1rio.</p> Source code in <code>src\\pixcore\\validate.py</code> <pre><code>def validar_cpf(cpf: str) -&gt; bool:\n    \"\"\"\n    Valida um n\u00famero de Cadastro de Pessoas F\u00edsicas (CPF).\n\n    A fun\u00e7\u00e3o remove caracteres n\u00e3o num\u00e9ricos, verifica se o CPF tem 11 d\u00edgitos,\n    descarta CPFs com todos os d\u00edgitos iguais e calcula os dois d\u00edgitos\n    verificadores para garantir a validade do n\u00famero.\n\n    Args:\n        cpf (str): O n\u00famero de CPF a ser validado, podendo conter ou n\u00e3o\n                   caracteres de formata\u00e7\u00e3o (ex: '123.456.789-00').\n\n    Returns:\n        bool: Retorna `True` se o CPF for v\u00e1lido, e `False` caso contr\u00e1rio.\n    \"\"\"\n    cpf = ''.join(filter(str.isdigit, cpf))\n\n    if len(cpf) != 11:\n        return False\n\n    if cpf == cpf[0] * 11:\n        return False\n\n    soma = 0\n    for i in range(9):\n        soma += int(cpf[i]) * (10 - i)\n    primeiro_digito = 11 - (soma % 11)\n    if primeiro_digito &gt;= 10:\n        primeiro_digito = 0\n\n    if int(cpf[9]) != primeiro_digito:\n        return False\n\n    soma = 0\n    for i in range(10):\n        soma += int(cpf[i]) * (11 - i)\n    segundo_digito = 11 - (soma % 11)\n\n    if segundo_digito &gt;= 10:\n        segundo_digito = 0\n\n    if int(cpf[10]) != segundo_digito:\n        return False\n    return True\n</code></pre>"},{"location":"api/Validar%20Chave%20Pix/#pixcore.validate.validar_email","title":"<code>validar_email(email)</code>","text":"<p>Verifica se o formato de um endere\u00e7o de e-mail \u00e9 sintaticamente v\u00e1lido.</p> <p>Utiliza uma express\u00e3o regular para checar a estrutura do e-mail (ex: usuario@dominio.com). Esta valida\u00e7\u00e3o n\u00e3o garante que o endere\u00e7o de e-mail realmente exista ou possa receber mensagens.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>A string contendo o e-mail a ser validado.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Retorna <code>True</code> se o formato do e-mail for v\u00e1lido, e <code>False</code>   caso contr\u00e1rio.</p> Source code in <code>src\\pixcore\\validate.py</code> <pre><code>def validar_email(email: str) -&gt; bool:\n    \"\"\"\n    Verifica se o formato de um endere\u00e7o de e-mail \u00e9 sintaticamente v\u00e1lido.\n\n    Utiliza uma express\u00e3o regular para checar a estrutura do e-mail (ex:\n    usuario@dominio.com). Esta valida\u00e7\u00e3o n\u00e3o garante que o endere\u00e7o de\n    e-mail realmente exista ou possa receber mensagens.\n\n    Args:\n        email (str): A string contendo o e-mail a ser validado.\n\n    Returns:\n        bool: Retorna `True` se o formato do e-mail for v\u00e1lido, e `False`\n              caso contr\u00e1rio.\n    \"\"\"\n    padrao = re.compile(r'^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$')\n    if re.match(padrao, email):\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"api/Validar%20Chave%20Pix/#pixcore.validate.validar_telefone","title":"<code>validar_telefone(telefone)</code>","text":"<p>Valida um n\u00famero de telefone brasileiro (fixo ou celular com 9\u00ba d\u00edgito).</p> <p>A fun\u00e7\u00e3o remove caracteres de formata\u00e7\u00e3o, trata o c\u00f3digo de pa\u00eds '55', valida a exist\u00eancia do DDD e verifica as regras de composi\u00e7\u00e3o do n\u00famero, incluindo a presen\u00e7a do nono d\u00edgito para celulares.</p> <p>Parameters:</p> Name Type Description Default <code>telefone</code> <code>str</code> <p>O n\u00famero de telefone a ser validado, com ou sem             formata\u00e7\u00e3o (ex: '+55 (11) 99999-8888').</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Retorna <code>True</code> se o n\u00famero for um telefone brasileiro v\u00e1lido,   e <code>False</code> caso contr\u00e1rio.</p> Source code in <code>src\\pixcore\\validate.py</code> <pre><code>def validar_telefone(telefone: str) -&gt; bool:\n    \"\"\"\n    Valida um n\u00famero de telefone brasileiro (fixo ou celular com 9\u00ba d\u00edgito).\n\n    A fun\u00e7\u00e3o remove caracteres de formata\u00e7\u00e3o, trata o c\u00f3digo de pa\u00eds '55',\n    valida a exist\u00eancia do DDD e verifica as regras de composi\u00e7\u00e3o do n\u00famero,\n    incluindo a presen\u00e7a do nono d\u00edgito para celulares.\n\n    Args:\n        telefone (str): O n\u00famero de telefone a ser validado, com ou sem\n                        formata\u00e7\u00e3o (ex: '+55 (11) 99999-8888').\n\n    Returns:\n        bool: Retorna `True` se o n\u00famero for um telefone brasileiro v\u00e1lido,\n              e `False` caso contr\u00e1rio.\n    \"\"\"\n    numeros = re.sub(r'\\D', '', telefone)\n\n    if len(numeros) == 12 or len(numeros) == 13:\n        if numeros.startswith('55'):\n            numeros = numeros[2:]\n        else:\n            return False\n\n    if not (10 &lt;= len(numeros) &lt;= 11):\n        return False\n\n    ddds_validos = {\n        '11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24',\n        '27', '28', '31', '32', '33', '34', '35', '37', '38', '41', '42', '43',\n        '44', '45', '46', '47', '48', '49', '51', '53', '54', '55', '61', '62',\n        '63', '64', '65', '66', '67', '68', '69', '71', '73', '74', '75', '77',\n        '79', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92',\n        '93', '94', '95', '96', '97', '98', '99'\n    }\n    ddd = numeros[:2]\n    if ddd not in ddds_validos:\n        return False\n\n    numero_real = numeros[2:]\n\n    if len(numero_real) == 9:\n        if numero_real[0] != '9':\n            return False\n    elif len(numero_real) == 8:\n        if numero_real[0] == '9':\n            return False\n    else:\n        return False\n\n    return True\n</code></pre>"}]}